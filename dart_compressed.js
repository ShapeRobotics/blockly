// Do not edit this file; automatically generated by build.py.
'use strict';

goog.provide("Blockly.Generator");
goog.provide("Blockly.Dart");
goog.require("Blockly.Generator");
Blockly.Dart = new Blockly.Generator("Dart");
Blockly.Dart.addReservedWords("assert,break,case,catch,class,const,continue,default,do,else,enum," + "extends,false,final,finally,for,if,in,is,new,null,rethrow,return,super," + "switch,this,throw,true,try,var,void,while,with," + "print,identityHashCode,identical,BidirectionalIterator,Comparable," + "double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num," + "Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime," + "Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch," +
    "StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError," + "ArgumentError,AssertionError,CastError,ConcurrentModificationError," + "CyclicInitializationError,Error,Exception,FallThroughError," + "FormatException,IntegerDivisionByZeroException,NoSuchMethodError," + "NullThrownError,OutOfMemoryError,RangeError,StackOverflowError," + "StateError,TypeError,UnimplementedError,UnsupportedError");
Blockly.Dart.ORDER_ATOMIC = 0;
Blockly.Dart.ORDER_UNARY_POSTFIX = 1;
Blockly.Dart.ORDER_UNARY_PREFIX = 2;
Blockly.Dart.ORDER_MULTIPLICATIVE = 3;
Blockly.Dart.ORDER_ADDITIVE = 4;
Blockly.Dart.ORDER_SHIFT = 5;
Blockly.Dart.ORDER_BITWISE_AND = 6;
Blockly.Dart.ORDER_BITWISE_XOR = 7;
Blockly.Dart.ORDER_BITWISE_OR = 8;
Blockly.Dart.ORDER_RELATIONAL = 9;
Blockly.Dart.ORDER_EQUALITY = 10;
Blockly.Dart.ORDER_LOGICAL_AND = 11;
Blockly.Dart.ORDER_LOGICAL_OR = 12;
Blockly.Dart.ORDER_IF_NULL = 13;
Blockly.Dart.ORDER_CONDITIONAL = 14;
Blockly.Dart.ORDER_CASCADE = 15;
Blockly.Dart.ORDER_ASSIGNMENT = 16;
Blockly.Dart.ORDER_NONE = 99;
Blockly.Dart.init = function(workspace) {
    Blockly.Dart.definitions_ = Object.create(null);
    Blockly.Dart.functionNames_ = Object.create(null);
    if (!Blockly.Dart.variableDB_) Blockly.Dart.variableDB_ = new Blockly.Names(Blockly.Dart.RESERVED_WORDS_);
    else Blockly.Dart.variableDB_.reset();
    Blockly.Dart.variableDB_.setVariableMap(workspace.getVariableMap());
    var defvars = [];
    var devVarList = Blockly.Variables.allDeveloperVariables(workspace);
    for (var i = 0; i < devVarList.length; i++) defvars.push(Blockly.Dart.variableDB_.getName(devVarList[i],
        Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    var variables = Blockly.Variables.allUsedVarModels(workspace);
    for (var i = 0; i < variables.length; i++) defvars.push(Blockly.Dart.variableDB_.getName(variables[i].getId(), Blockly.Variables.NAME_TYPE));
    if (defvars.length) Blockly.Dart.definitions_["variables"] = "var " + defvars.join(", ") + ";"
};
Blockly.Dart.finish = function(code) {
    if (code) code = Blockly.Dart.prefixLines(code, Blockly.Dart.INDENT);
    code = "main() {\n" + code + "}";
    var imports = [];
    var definitions = [];
    for (var name in Blockly.Dart.definitions_) {
        var def = Blockly.Dart.definitions_[name];
        if (def.match(/^import\s/)) imports.push(def);
        else definitions.push(def)
    }
    delete Blockly.Dart.definitions_;
    delete Blockly.Dart.functionNames_;
    Blockly.Dart.variableDB_.reset();
    var allDefs = imports.join("\n") + "\n\n" + definitions.join("\n\n");
    return allDefs.replace(/\n\n+/g,
        "\n\n").replace(/\n*$/, "\n\n\n") + code
};
Blockly.Dart.scrubNakedValue = function(line) {
    return line + ";\n"
};
Blockly.Dart.quote_ = function(string) {
    string = string.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/\$/g, "\\$").replace(/'/g, "\\'");
    return "'" + string + "'"
};
Blockly.Dart.scrub_ = function(block, code) {
    var commentCode = "";
    if (!block.outputConnection || !block.outputConnection.targetConnection) {
        var comment = block.getCommentText();
        comment = Blockly.utils.wrap(comment, Blockly.Dart.COMMENT_WRAP - 3);
        if (comment)
            if (block.getProcedureDef) commentCode += Blockly.Dart.prefixLines(comment + "\n", "/// ");
            else commentCode += Blockly.Dart.prefixLines(comment + "\n", "// ");
        for (var i = 0; i < block.inputList.length; i++)
            if (block.inputList[i].type == Blockly.INPUT_VALUE) {
                var childBlock = block.inputList[i].connection.targetBlock();
                if (childBlock) {
                    var comment = Blockly.Dart.allNestedComments(childBlock);
                    if (comment) commentCode += Blockly.Dart.prefixLines(comment, "// ")
                }
            }
    }
    var nextBlock = block.nextConnection && block.nextConnection.targetBlock();
    var nextCode = Blockly.Dart.blockToCode(nextBlock);
    return commentCode + code + nextCode
};
Blockly.Dart.getAdjusted = function(block, atId, opt_delta, opt_negate, opt_order) {
    var delta = opt_delta || 0;
    var order = opt_order || Blockly.Dart.ORDER_NONE;
    if (block.workspace.options.oneBasedIndex) delta--;
    var defaultAtIndex = block.workspace.options.oneBasedIndex ? "1" : "0";
    if (delta) var at = Blockly.Dart.valueToCode(block, atId, Blockly.Dart.ORDER_ADDITIVE) || defaultAtIndex;
    else if (opt_negate) var at = Blockly.Dart.valueToCode(block, atId, Blockly.Dart.ORDER_UNARY_PREFIX) || defaultAtIndex;
    else var at = Blockly.Dart.valueToCode(block,
        atId, order) || defaultAtIndex;
    if (Blockly.isNumber(at)) {
        at = parseInt(at, 10) + delta;
        if (opt_negate) at = -at
    } else {
        if (delta > 0) {
            at = at + " + " + delta;
            var innerOrder = Blockly.Dart.ORDER_ADDITIVE
        } else if (delta < 0) {
            at = at + " - " + -delta;
            var innerOrder = Blockly.Dart.ORDER_ADDITIVE
        }
        if (opt_negate) {
            if (delta) at = "-(" + at + ")";
            else at = "-" + at;
            var innerOrder = Blockly.Dart.ORDER_UNARY_PREFIX
        }
        innerOrder = Math.floor(innerOrder);
        order = Math.floor(order);
        if (innerOrder && order >= innerOrder) at = "(" + at + ")"
    }
    return at
};
goog.provide("Blockly.Dart.colour");
goog.require("Blockly.Dart");
Blockly.Dart.addReservedWords("Math");
Blockly.Dart["colour_picker"] = function(block) {
    var code = "'" + block.getFieldValue("COLOUR") + "'";
    return [code, Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["colour_random"] = function(block) {
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var functionName = Blockly.Dart.provideFunction_("colour_random", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  String hex = '0123456789abcdef';", "  var rnd = new Math.Random();", "  return '#${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'", "      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'", "      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}';", "}"]);
    var code =
        functionName + "()";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["colour_rgb"] = function(block) {
    var red = Blockly.Dart.valueToCode(block, "RED", Blockly.Dart.ORDER_NONE) || 0;
    var green = Blockly.Dart.valueToCode(block, "GREEN", Blockly.Dart.ORDER_NONE) || 0;
    var blue = Blockly.Dart.valueToCode(block, "BLUE", Blockly.Dart.ORDER_NONE) || 0;
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var functionName = Blockly.Dart.provideFunction_("colour_rgb", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(num r, num g, num b) {", "  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();",
        "  String rs = rn.toInt().toRadixString(16);", "  rs = '0$rs';", "  rs = rs.substring(rs.length - 2);", "  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();", "  String gs = gn.toInt().toRadixString(16);", "  gs = '0$gs';", "  gs = gs.substring(gs.length - 2);", "  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();", "  String bs = bn.toInt().toRadixString(16);", "  bs = '0$bs';", "  bs = bs.substring(bs.length - 2);", "  return '#$rs$gs$bs';", "}"
    ]);
    var code = functionName + "(" + red + ", " + green + ", " +
        blue + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["colour_blend"] = function(block) {
    var c1 = Blockly.Dart.valueToCode(block, "COLOUR1", Blockly.Dart.ORDER_NONE) || "'#000000'";
    var c2 = Blockly.Dart.valueToCode(block, "COLOUR2", Blockly.Dart.ORDER_NONE) || "'#000000'";
    var ratio = Blockly.Dart.valueToCode(block, "RATIO", Blockly.Dart.ORDER_NONE) || .5;
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var functionName = Blockly.Dart.provideFunction_("colour_blend", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String c1, String c2, num ratio) {",
        "  ratio = Math.max(Math.min(ratio, 1), 0);", "  int r1 = int.parse('0x${c1.substring(1, 3)}');", "  int g1 = int.parse('0x${c1.substring(3, 5)}');", "  int b1 = int.parse('0x${c1.substring(5, 7)}');", "  int r2 = int.parse('0x${c2.substring(1, 3)}');", "  int g2 = int.parse('0x${c2.substring(3, 5)}');", "  int b2 = int.parse('0x${c2.substring(5, 7)}');", "  num rn = (r1 * (1 - ratio) + r2 * ratio).round();", "  String rs = rn.toInt().toRadixString(16);", "  num gn = (g1 * (1 - ratio) + g2 * ratio).round();",
        "  String gs = gn.toInt().toRadixString(16);", "  num bn = (b1 * (1 - ratio) + b2 * ratio).round();", "  String bs = bn.toInt().toRadixString(16);", "  rs = '0$rs';", "  rs = rs.substring(rs.length - 2);", "  gs = '0$gs';", "  gs = gs.substring(gs.length - 2);", "  bs = '0$bs';", "  bs = bs.substring(bs.length - 2);", "  return '#$rs$gs$bs';", "}"
    ]);
    var code = functionName + "(" + c1 + ", " + c2 + ", " + ratio + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
goog.provide("Blockly.Dart.lists");
goog.require("Blockly.Dart");
Blockly.Dart.addReservedWords("Math");
Blockly.Dart["lists_create_empty"] = function(block) {
    return ["[]", Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["lists_create_with"] = function(block) {
    var elements = new Array(block.itemCount_);
    for (var i = 0; i < block.itemCount_; i++) elements[i] = Blockly.Dart.valueToCode(block, "ADD" + i, Blockly.Dart.ORDER_NONE) || "null";
    var code = "[" + elements.join(", ") + "]";
    return [code, Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["lists_repeat"] = function(block) {
    var element = Blockly.Dart.valueToCode(block, "ITEM", Blockly.Dart.ORDER_NONE) || "null";
    var repeatCount = Blockly.Dart.valueToCode(block, "NUM", Blockly.Dart.ORDER_NONE) || "0";
    var code = "new List.filled(" + repeatCount + ", " + element + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_length"] = function(block) {
    var list = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "[]";
    return [list + ".length", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_isEmpty"] = function(block) {
    var list = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "[]";
    return [list + ".isEmpty", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_indexOf"] = function(block) {
    var operator = block.getFieldValue("END") == "FIRST" ? "indexOf" : "lastIndexOf";
    var item = Blockly.Dart.valueToCode(block, "FIND", Blockly.Dart.ORDER_NONE) || "''";
    var list = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "[]";
    var code = list + "." + operator + "(" + item + ")";
    if (block.workspace.options.oneBasedIndex) return [code + " + 1", Blockly.Dart.ORDER_ADDITIVE];
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_getIndex"] = function(block) {
    var mode = block.getFieldValue("MODE") || "GET";
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var listOrder = where == "RANDOM" || where == "FROM_END" ? Blockly.Dart.ORDER_NONE : Blockly.Dart.ORDER_UNARY_POSTFIX;
    var list = Blockly.Dart.valueToCode(block, "VALUE", listOrder) || "[]";

    function cacheList() {
        var listVar = Blockly.Dart.variableDB_.getDistinctName("tmp_list", Blockly.Variables.NAME_TYPE);
        var code = "List " + listVar + " = " + list + ";\n";
        list = listVar;
        return code
    }
    if ((where ==
            "RANDOM" && mode == "REMOVE" || where == "FROM_END") && !list.match(/^\w+$/))
        if (where == "RANDOM") {
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var code = cacheList();
            var xVar = Blockly.Dart.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE);
            code += "int " + xVar + " = new Math.Random().nextInt(" + list + ".length);\n";
            code += list + ".removeAt(" + xVar + ");\n";
            return code
        } else if (mode == "REMOVE") {
        var at = Blockly.Dart.getAdjusted(block, "AT", 1, false, Blockly.Dart.ORDER_ADDITIVE);
        var code =
            cacheList();
        code += list + ".removeAt(" + list + ".length" + " - " + at + ");\n";
        return code
    } else if (mode == "GET") {
        var at = Blockly.Dart.getAdjusted(block, "AT", 1);
        var functionName = Blockly.Dart.provideFunction_("lists_get_from_end", ["dynamic " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list, num x) {", "  x = my_list.length - x;", "  return my_list[x];", "}"]);
        var code = functionName + "(" + list + ", " + at + ")";
        return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
    } else {
        if (mode == "GET_REMOVE") {
            var at = Blockly.Dart.getAdjusted(block,
                "AT", 1);
            var functionName = Blockly.Dart.provideFunction_("lists_remove_from_end", ["dynamic " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list, num x) {", "  x = my_list.length - x;", "  return my_list.removeAt(x);", "}"]);
            var code = functionName + "(" + list + ", " + at + ")";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
        }
    } else switch (where) {
        case "FIRST":
            if (mode == "GET") {
                var code = list + ".first";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".removeAt(0)";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode ==
                "REMOVE") return list + ".removeAt(0);\n";
            break;
        case "LAST":
            if (mode == "GET") {
                var code = list + ".last";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".removeLast()";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "REMOVE") return list + ".removeLast();\n";
            break;
        case "FROM_START":
            var at = Blockly.Dart.getAdjusted(block, "AT");
            if (mode == "GET") {
                var code = list + "[" + at + "]";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".removeAt(" +
                    at + ")";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "REMOVE") return list + ".removeAt(" + at + ");\n";
            break;
        case "FROM_END":
            var at = Blockly.Dart.getAdjusted(block, "AT", 1, false, Blockly.Dart.ORDER_ADDITIVE);
            if (mode == "GET") {
                var code = list + "[" + list + ".length - " + at + "]";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "GET_REMOVE" || mode == "REMOVE") {
                var code = list + ".removeAt(" + list + ".length - " + at + ")";
                if (mode == "GET_REMOVE") return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
                else if (mode == "REMOVE") return code +
                    ";\n"
            }
            break;
        case "RANDOM":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            if (mode == "REMOVE") {
                var xVar = Blockly.Dart.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE);
                var code = "int " + xVar + " = new Math.Random().nextInt(" + list + ".length);\n";
                code += list + ".removeAt(" + xVar + ");\n";
                return code
            } else if (mode == "GET") {
                var functionName = Blockly.Dart.provideFunction_("lists_get_random_item", ["dynamic " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list) {", "  int x = new Math.Random().nextInt(my_list.length);",
                    "  return my_list[x];", "}"
                ]);
                var code = functionName + "(" + list + ")";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            } else if (mode == "GET_REMOVE") {
                var functionName = Blockly.Dart.provideFunction_("lists_remove_random_item", ["dynamic " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List my_list) {", "  int x = new Math.Random().nextInt(my_list.length);", "  return my_list.removeAt(x);", "}"]);
                var code = functionName + "(" + list + ")";
                return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
            }
            break
    }
    throw Error("Unhandled combination (lists_getIndex).");
};
Blockly.Dart["lists_setIndex"] = function(block) {
    var mode = block.getFieldValue("MODE") || "GET";
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var list = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_UNARY_POSTFIX) || "[]";
    var value = Blockly.Dart.valueToCode(block, "TO", Blockly.Dart.ORDER_ASSIGNMENT) || "null";

    function cacheList() {
        if (list.match(/^\w+$/)) return "";
        var listVar = Blockly.Dart.variableDB_.getDistinctName("tmp_list", Blockly.Variables.NAME_TYPE);
        var code = "List " + listVar + " = " + list + ";\n";
        list =
            listVar;
        return code
    }
    switch (where) {
        case "FIRST":
            if (mode == "SET") return list + "[0] = " + value + ";\n";
            else if (mode == "INSERT") return list + ".insert(0, " + value + ");\n";
            break;
        case "LAST":
            if (mode == "SET") {
                var code = cacheList();
                code += list + "[" + list + ".length - 1] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") return list + ".add(" + value + ");\n";
            break;
        case "FROM_START":
            var at = Blockly.Dart.getAdjusted(block, "AT");
            if (mode == "SET") return list + "[" + at + "] = " + value + ";\n";
            else if (mode == "INSERT") return list + ".insert(" + at + ", " +
                value + ");\n";
            break;
        case "FROM_END":
            var at = Blockly.Dart.getAdjusted(block, "AT", 1, false, Blockly.Dart.ORDER_ADDITIVE);
            var code = cacheList();
            if (mode == "SET") {
                code += list + "[" + list + ".length - " + at + "] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") {
                code += list + ".insert(" + list + ".length - " + at + ", " + value + ");\n";
                return code
            }
            break;
        case "RANDOM":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var code = cacheList();
            var xVar = Blockly.Dart.variableDB_.getDistinctName("tmp_x", Blockly.Variables.NAME_TYPE);
            code += "int " + xVar + " = new Math.Random().nextInt(" + list + ".length);\n";
            if (mode == "SET") {
                code += list + "[" + xVar + "] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") {
                code += list + ".insert(" + xVar + ", " + value + ");\n";
                return code
            }
            break
    }
    throw Error("Unhandled combination (lists_setIndex).");
};
Blockly.Dart["lists_getSublist"] = function(block) {
    var list = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_UNARY_POSTFIX) || "[]";
    var where1 = block.getFieldValue("WHERE1");
    var where2 = block.getFieldValue("WHERE2");
    if (list.match(/^\w+$/) || where1 != "FROM_END" && where2 == "FROM_START") {
        switch (where1) {
            case "FROM_START":
                var at1 = Blockly.Dart.getAdjusted(block, "AT1");
                break;
            case "FROM_END":
                var at1 = Blockly.Dart.getAdjusted(block, "AT1", 1, false, Blockly.Dart.ORDER_ADDITIVE);
                at1 = list + ".length - " + at1;
                break;
            case "FIRST":
                var at1 =
                    "0";
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        switch (where2) {
            case "FROM_START":
                var at2 = Blockly.Dart.getAdjusted(block, "AT2", 1);
                break;
            case "FROM_END":
                var at2 = Blockly.Dart.getAdjusted(block, "AT2", 0, false, Blockly.Dart.ORDER_ADDITIVE);
                at2 = list + ".length - " + at2;
                break;
            case "LAST":
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        if (where2 == "LAST") var code = list + ".sublist(" + at1 + ")";
        else var code = list + ".sublist(" + at1 + ", " + at2 + ")"
    } else {
        var at1 = Blockly.Dart.getAdjusted(block,
            "AT1");
        var at2 = Blockly.Dart.getAdjusted(block, "AT2");
        var functionName = Blockly.Dart.provideFunction_("lists_get_sublist", ["List " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List list, String where1, num at1, String where2, num at2) {", "  int getAt(String where, num at) {", "    if (where == 'FROM_END') {", "      at = list.length - 1 - at;", "    } else if (where == 'FIRST') {", "      at = 0;", "    } else if (where == 'LAST') {", "      at = list.length - 1;", "    } else if (where != 'FROM_START') {", "      throw 'Unhandled option (lists_getSublist).';",
            "    }", "    return at;", "  }", "  at1 = getAt(where1, at1);", "  at2 = getAt(where2, at2) + 1;", "  return list.sublist(at1, at2);", "}"
        ]);
        var code = functionName + "(" + list + ", '" + where1 + "', " + at1 + ", '" + where2 + "', " + at2 + ")"
    }
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_sort"] = function(block) {
    var list = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_NONE) || "[]";
    var direction = block.getFieldValue("DIRECTION") === "1" ? 1 : -1;
    var type = block.getFieldValue("TYPE");
    var sortFunctionName = Blockly.Dart.provideFunction_("lists_sort", ["List " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List list, String type, int direction) {", "  var compareFuncs = {", '    "NUMERIC": (a, b) => (direction * a.compareTo(b)).toInt(),', '    "TEXT": (a, b) => direction * ' + "a.toString().compareTo(b.toString()),",
        '    "IGNORE_CASE": ', "       (a, b) => direction * ", "      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())", "  };", "  list = new List.from(list);", "  var compare = compareFuncs[type];", "  list.sort(compare);", "  return list;", "}"
    ]);
    return [sortFunctionName + "(" + list + ", " + '"' + type + '", ' + direction + ")", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_split"] = function(block) {
    var input = Blockly.Dart.valueToCode(block, "INPUT", Blockly.Dart.ORDER_UNARY_POSTFIX);
    var delimiter = Blockly.Dart.valueToCode(block, "DELIM", Blockly.Dart.ORDER_NONE) || "''";
    var mode = block.getFieldValue("MODE");
    if (mode == "SPLIT") {
        if (!input) input = "''";
        var functionName = "split"
    } else if (mode == "JOIN") {
        if (!input) input = "[]";
        var functionName = "join"
    } else throw Error("Unknown mode: " + mode);
    var code = input + "." + functionName + "(" + delimiter + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["lists_reverse"] = function(block) {
    var list = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_NONE) || "[]";
    var code = "new List.from(" + list + ".reversed)";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
goog.provide("Blockly.Dart.logic");
goog.require("Blockly.Dart");
Blockly.Dart["controls_if"] = function(block) {
    var n = 0;
    var code = "",
        branchCode, conditionCode;
    do {
        conditionCode = Blockly.Dart.valueToCode(block, "IF" + n, Blockly.Dart.ORDER_NONE) || "false";
        branchCode = Blockly.Dart.statementToCode(block, "DO" + n);
        code += (n > 0 ? "else " : "") + "if (" + conditionCode + ") {\n" + branchCode + "}";
        ++n
    } while (block.getInput("IF" + n));
    if (block.getInput("ELSE")) {
        branchCode = Blockly.Dart.statementToCode(block, "ELSE");
        code += " else {\n" + branchCode + "}"
    }
    return code + "\n"
};
Blockly.Dart["controls_ifelse"] = Blockly.Dart["controls_if"];
Blockly.Dart["logic_compare"] = function(block) {
    var OPERATORS = {
        "EQ": "==",
        "NEQ": "!=",
        "LT": "<",
        "LTE": "<=",
        "GT": ">",
        "GTE": ">="
    };
    var operator = OPERATORS[block.getFieldValue("OP")];
    var order = operator == "==" || operator == "!=" ? Blockly.Dart.ORDER_EQUALITY : Blockly.Dart.ORDER_RELATIONAL;
    var argument0 = Blockly.Dart.valueToCode(block, "A", order) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "B", order) || "0";
    var code = argument0 + " " + operator + " " + argument1;
    return [code, order]
};
Blockly.Dart["logic_operation"] = function(block) {
    var operator = block.getFieldValue("OP") == "AND" ? "&&" : "||";
    var order = operator == "&&" ? Blockly.Dart.ORDER_LOGICAL_AND : Blockly.Dart.ORDER_LOGICAL_OR;
    var argument0 = Blockly.Dart.valueToCode(block, "A", order);
    var argument1 = Blockly.Dart.valueToCode(block, "B", order);
    if (!argument0 && !argument1) {
        argument0 = "false";
        argument1 = "false"
    } else {
        var defaultArgument = operator == "&&" ? "true" : "false";
        if (!argument0) argument0 = defaultArgument;
        if (!argument1) argument1 = defaultArgument
    }
    var code =
        argument0 + " " + operator + " " + argument1;
    return [code, order]
};
Blockly.Dart["logic_negate"] = function(block) {
    var order = Blockly.Dart.ORDER_UNARY_PREFIX;
    var argument0 = Blockly.Dart.valueToCode(block, "BOOL", order) || "true";
    var code = "!" + argument0;
    return [code, order]
};
Blockly.Dart["logic_boolean"] = function(block) {
    var code = block.getFieldValue("BOOL") == "TRUE" ? "true" : "false";
    return [code, Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["logic_null"] = function(block) {
    return ["null", Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["logic_ternary"] = function(block) {
    var value_if = Blockly.Dart.valueToCode(block, "IF", Blockly.Dart.ORDER_CONDITIONAL) || "false";
    var value_then = Blockly.Dart.valueToCode(block, "THEN", Blockly.Dart.ORDER_CONDITIONAL) || "null";
    var value_else = Blockly.Dart.valueToCode(block, "ELSE", Blockly.Dart.ORDER_CONDITIONAL) || "null";
    var code = value_if + " ? " + value_then + " : " + value_else;
    return [code, Blockly.Dart.ORDER_CONDITIONAL]
};
goog.provide("Blockly.Dart.loops");
goog.require("Blockly.Dart");
Blockly.Dart["controls_repeat_ext"] = function(block) {
    if (block.getField("TIMES")) var repeats = String(Number(block.getFieldValue("TIMES")));
    else var repeats = Blockly.Dart.valueToCode(block, "TIMES", Blockly.Dart.ORDER_ASSIGNMENT) || "0";
    var branch = Blockly.Dart.statementToCode(block, "DO");
    branch = Blockly.Dart.addLoopTrap(branch, block.id);
    var code = "";
    var loopVar = Blockly.Dart.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE);
    var endVar = repeats;
    if (!repeats.match(/^\w+$/) && !Blockly.isNumber(repeats)) {
        var endVar =
            Blockly.Dart.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE);
        code += "var " + endVar + " = " + repeats + ";\n"
    }
    code += "for (int " + loopVar + " = 0; " + loopVar + " < " + endVar + "; " + loopVar + "++) {\n" + branch + "}\n";
    return code
};
Blockly.Dart["controls_repeat"] = Blockly.Dart["controls_repeat_ext"];
Blockly.Dart["controls_whileUntil"] = function(block) {
    var until = block.getFieldValue("MODE") == "UNTIL";
    var argument0 = Blockly.Dart.valueToCode(block, "BOOL", until ? Blockly.Dart.ORDER_UNARY_PREFIX : Blockly.Dart.ORDER_NONE) || "false";
    var branch = Blockly.Dart.statementToCode(block, "DO");
    branch = Blockly.Dart.addLoopTrap(branch, block.id);
    if (until) argument0 = "!" + argument0;
    return "while (" + argument0 + ") {\n" + branch + "}\n"
};
Blockly.Dart["controls_for"] = function(block) {
    var variable0 = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var argument0 = Blockly.Dart.valueToCode(block, "FROM", Blockly.Dart.ORDER_ASSIGNMENT) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "TO", Blockly.Dart.ORDER_ASSIGNMENT) || "0";
    var increment = Blockly.Dart.valueToCode(block, "BY", Blockly.Dart.ORDER_ASSIGNMENT) || "1";
    var branch = Blockly.Dart.statementToCode(block, "DO");
    branch = Blockly.Dart.addLoopTrap(branch, block.id);
    var code;
    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) && Blockly.isNumber(increment)) {
        var up = parseFloat(argument0) <= parseFloat(argument1);
        code = "for (" + variable0 + " = " + argument0 + "; " + variable0 + (up ? " <= " : " >= ") + argument1 + "; " + variable0;
        var step = Math.abs(parseFloat(increment));
        if (step == 1) code += up ? "++" : "--";
        else code += (up ? " += " : " -= ") + step;
        code += ") {\n" + branch + "}\n"
    } else {
        code = "";
        var startVar = argument0;
        if (!argument0.match(/^\w+$/) && !Blockly.isNumber(argument0)) {
            var startVar = Blockly.Dart.variableDB_.getDistinctName(variable0 +
                "_start", Blockly.Variables.NAME_TYPE);
            code += "var " + startVar + " = " + argument0 + ";\n"
        }
        var endVar = argument1;
        if (!argument1.match(/^\w+$/) && !Blockly.isNumber(argument1)) {
            var endVar = Blockly.Dart.variableDB_.getDistinctName(variable0 + "_end", Blockly.Variables.NAME_TYPE);
            code += "var " + endVar + " = " + argument1 + ";\n"
        }
        var incVar = Blockly.Dart.variableDB_.getDistinctName(variable0 + "_inc", Blockly.Variables.NAME_TYPE);
        code += "num " + incVar + " = ";
        if (Blockly.isNumber(increment)) code += Math.abs(increment) + ";\n";
        else code +=
            "(" + increment + ").abs();\n";
        code += "if (" + startVar + " > " + endVar + ") {\n";
        code += Blockly.Dart.INDENT + incVar + " = -" + incVar + ";\n";
        code += "}\n";
        code += "for (" + variable0 + " = " + startVar + "; " + incVar + " >= 0 ? " + variable0 + " <= " + endVar + " : " + variable0 + " >= " + endVar + "; " + variable0 + " += " + incVar + ") {\n" + branch + "}\n"
    }
    return code
};
Blockly.Dart["controls_forEach"] = function(block) {
    var variable0 = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var argument0 = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_ASSIGNMENT) || "[]";
    var branch = Blockly.Dart.statementToCode(block, "DO");
    branch = Blockly.Dart.addLoopTrap(branch, block.id);
    var code = "for (var " + variable0 + " in " + argument0 + ") {\n" + branch + "}\n";
    return code
};
Blockly.Dart["controls_flow_statements"] = function(block) {
    switch (block.getFieldValue("FLOW")) {
        case "BREAK":
            return "break;\n";
        case "CONTINUE":
            return "continue;\n"
    }
    throw Error("Unknown flow statement.");
};
goog.provide("Blockly.Dart.math");
goog.require("Blockly.Dart");
Blockly.Dart.addReservedWords("Math");
Blockly.Dart["math_number"] = function(block) {
    var code = parseFloat(block.getFieldValue("NUM"));
    var order;
    if (code == Infinity) {
        code = "double.infinity";
        order = Blockly.Dart.ORDER_UNARY_POSTFIX
    } else if (code == -Infinity) {
        code = "-double.infinity";
        order = Blockly.Dart.ORDER_UNARY_PREFIX
    } else order = code < 0 ? Blockly.Dart.ORDER_UNARY_PREFIX : Blockly.Dart.ORDER_ATOMIC;
    return [code, order]
};
Blockly.Dart["math_arithmetic"] = function(block) {
    var OPERATORS = {
        "ADD": [" + ", Blockly.Dart.ORDER_ADDITIVE],
        "MINUS": [" - ", Blockly.Dart.ORDER_ADDITIVE],
        "MULTIPLY": [" * ", Blockly.Dart.ORDER_MULTIPLICATIVE],
        "DIVIDE": [" / ", Blockly.Dart.ORDER_MULTIPLICATIVE],
        "POWER": [null, Blockly.Dart.ORDER_NONE]
    };
    var tuple = OPERATORS[block.getFieldValue("OP")];
    var operator = tuple[0];
    var order = tuple[1];
    var argument0 = Blockly.Dart.valueToCode(block, "A", order) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "B", order) || "0";
    var code;
    if (!operator) {
        Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
        code = "Math.pow(" + argument0 + ", " + argument1 + ")";
        return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
    }
    code = argument0 + operator + argument1;
    return [code, order]
};
Blockly.Dart["math_single"] = function(block) {
    var operator = block.getFieldValue("OP");
    var code;
    var arg;
    if (operator == "NEG") {
        arg = Blockly.Dart.valueToCode(block, "NUM", Blockly.Dart.ORDER_UNARY_PREFIX) || "0";
        if (arg[0] == "-") arg = " " + arg;
        code = "-" + arg;
        return [code, Blockly.Dart.ORDER_UNARY_PREFIX]
    }
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    if (operator == "ABS" || operator.substring(0, 5) == "ROUND") arg = Blockly.Dart.valueToCode(block, "NUM", Blockly.Dart.ORDER_UNARY_POSTFIX) || "0";
    else if (operator ==
        "SIN" || operator == "COS" || operator == "TAN") arg = Blockly.Dart.valueToCode(block, "NUM", Blockly.Dart.ORDER_MULTIPLICATIVE) || "0";
    else arg = Blockly.Dart.valueToCode(block, "NUM", Blockly.Dart.ORDER_NONE) || "0";
    switch (operator) {
        case "ABS":
            code = arg + ".abs()";
            break;
        case "ROOT":
            code = "Math.sqrt(" + arg + ")";
            break;
        case "LN":
            code = "Math.log(" + arg + ")";
            break;
        case "EXP":
            code = "Math.exp(" + arg + ")";
            break;
        case "POW10":
            code = "Math.pow(10," + arg + ")";
            break;
        case "ROUND":
            code = arg + ".round()";
            break;
        case "ROUNDUP":
            code = arg + ".ceil()";
            break;
        case "ROUNDDOWN":
            code = arg + ".floor()";
            break;
        case "SIN":
            code = "Math.sin(" + arg + " / 180 * Math.pi)";
            break;
        case "COS":
            code = "Math.cos(" + arg + " / 180 * Math.pi)";
            break;
        case "TAN":
            code = "Math.tan(" + arg + " / 180 * Math.pi)";
            break
    }
    if (code) return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
    switch (operator) {
        case "LOG10":
            code = "Math.log(" + arg + ") / Math.log(10)";
            break;
        case "ASIN":
            code = "Math.asin(" + arg + ") / Math.pi * 180";
            break;
        case "ACOS":
            code = "Math.acos(" + arg + ") / Math.pi * 180";
            break;
        case "ATAN":
            code = "Math.atan(" + arg +
                ") / Math.pi * 180";
            break;
        default:
            throw Error("Unknown math operator: " + operator);
    }
    return [code, Blockly.Dart.ORDER_MULTIPLICATIVE]
};
Blockly.Dart["math_constant"] = function(block) {
    var CONSTANTS = {
        "PI": ["Math.pi", Blockly.Dart.ORDER_UNARY_POSTFIX],
        "E": ["Math.e", Blockly.Dart.ORDER_UNARY_POSTFIX],
        "GOLDEN_RATIO": ["(1 + Math.sqrt(5)) / 2", Blockly.Dart.ORDER_MULTIPLICATIVE],
        "SQRT2": ["Math.sqrt2", Blockly.Dart.ORDER_UNARY_POSTFIX],
        "SQRT1_2": ["Math.sqrt1_2", Blockly.Dart.ORDER_UNARY_POSTFIX],
        "INFINITY": ["double.infinity", Blockly.Dart.ORDER_ATOMIC]
    };
    var constant = block.getFieldValue("CONSTANT");
    if (constant != "INFINITY") Blockly.Dart.definitions_["import_dart_math"] =
        "import 'dart:math' as Math;";
    return CONSTANTS[constant]
};
Blockly.Dart["math_number_property"] = function(block) {
    var number_to_check = Blockly.Dart.valueToCode(block, "NUMBER_TO_CHECK", Blockly.Dart.ORDER_MULTIPLICATIVE);
    if (!number_to_check) return ["false", Blockly.Python.ORDER_ATOMIC];
    var dropdown_property = block.getFieldValue("PROPERTY");
    var code;
    if (dropdown_property == "PRIME") {
        Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
        var functionName = Blockly.Dart.provideFunction_("math_isPrime", ["bool " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +
            "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;", "  }", "  // False if n is null, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.", "  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 ||" + " n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;",
            "    }", "  }", "  return true;", "}"
        ]);
        code = functionName + "(" + number_to_check + ")";
        return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
    }
    switch (dropdown_property) {
        case "EVEN":
            code = number_to_check + " % 2 == 0";
            break;
        case "ODD":
            code = number_to_check + " % 2 == 1";
            break;
        case "WHOLE":
            code = number_to_check + " % 1 == 0";
            break;
        case "POSITIVE":
            code = number_to_check + " > 0";
            break;
        case "NEGATIVE":
            code = number_to_check + " < 0";
            break;
        case "DIVISIBLE_BY":
            var divisor = Blockly.Dart.valueToCode(block, "DIVISOR", Blockly.Dart.ORDER_MULTIPLICATIVE);
            if (!divisor) return ["false", Blockly.Python.ORDER_ATOMIC];
            code = number_to_check + " % " + divisor + " == 0";
            break
    }
    return [code, Blockly.Dart.ORDER_EQUALITY]
};
Blockly.Dart["math_change"] = function(block) {
    var argument0 = Blockly.Dart.valueToCode(block, "DELTA", Blockly.Dart.ORDER_ADDITIVE) || "0";
    var varName = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return varName + " = (" + varName + " is num ? " + varName + " : 0) + " + argument0 + ";\n"
};
Blockly.Dart["math_round"] = Blockly.Dart["math_single"];
Blockly.Dart["math_trig"] = Blockly.Dart["math_single"];
Blockly.Dart["math_on_list"] = function(block) {
    var func = block.getFieldValue("OP");
    var list = Blockly.Dart.valueToCode(block, "LIST", Blockly.Dart.ORDER_NONE) || "[]";
    var code;
    switch (func) {
        case "SUM":
            var functionName = Blockly.Dart.provideFunction_("math_sum", ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  num sumVal = 0;", "  myList.forEach((num entry) {sumVal += entry;});", "  return sumVal;", "}"]);
            code = functionName + "(" + list + ")";
            break;
        case "MIN":
            Blockly.Dart.definitions_["import_dart_math"] =
                "import 'dart:math' as Math;";
            var functionName = Blockly.Dart.provideFunction_("math_min", ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  if (myList.isEmpty) return null;", "  num minVal = myList[0];", "  myList.forEach((num entry) " + "{minVal = Math.min(minVal, entry);});", "  return minVal;", "}"]);
            code = functionName + "(" + list + ")";
            break;
        case "MAX":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var functionName = Blockly.Dart.provideFunction_("math_max",
                ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List<num> myList) {", "  if (myList.isEmpty) return null;", "  num maxVal = myList[0];", "  myList.forEach((num entry) " + "{maxVal = Math.max(maxVal, entry);});", "  return maxVal;", "}"]);
            code = functionName + "(" + list + ")";
            break;
        case "AVERAGE":
            var functionName = Blockly.Dart.provideFunction_("math_mean", ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  // First filter list for numbers only.", "  List localList = new List.from(myList);", "  localList.removeWhere((a) => a is! num);",
                "  if (localList.isEmpty) return null;", "  num sumVal = 0;", "  localList.forEach((var entry) {sumVal += entry;});", "  return sumVal / localList.length;", "}"
            ]);
            code = functionName + "(" + list + ")";
            break;
        case "MEDIAN":
            var functionName = Blockly.Dart.provideFunction_("math_median", ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  // First filter list for numbers only, then sort, " + "then return middle value", "  // or the average of two middle values if list has an " + "even number of elements.",
                "  List localList = new List.from(myList);", "  localList.removeWhere((a) => a is! num);", "  if (localList.isEmpty) return null;", "  localList.sort((a, b) => (a - b));", "  int index = localList.length ~/ 2;", "  if (localList.length % 2 == 1) {", "    return localList[index];", "  } else {", "    return (localList[index - 1] + localList[index]) / 2;", "  }", "}"
            ]);
            code = functionName + "(" + list + ")";
            break;
        case "MODE":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var functionName =
                Blockly.Dart.provideFunction_("math_modes", ["List " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List values) {", "  List modes = [];", "  List counts = [];", "  int maxCount = 0;", "  for (int i = 0; i < values.length; i++) {", "    var value = values[i];", "    bool found = false;", "    int thisCount;", "    for (int j = 0; j < counts.length; j++) {", "      if (counts[j][0] == value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.add([value, 1]);",
                    "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (int j = 0; j < counts.length; j++) {", "    if (counts[j][1] == maxCount) {", "        modes.add(counts[j][0]);", "    }", "  }", "  return modes;", "}"
                ]);
            code = functionName + "(" + list + ")";
            break;
        case "STD_DEV":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var functionName = Blockly.Dart.provideFunction_("math_standard_deviation", ["num " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {",
                "  // First filter list for numbers only.", "  List numbers = new List.from(myList);", "  numbers.removeWhere((a) => a is! num);", "  if (numbers.isEmpty) return null;", "  num n = numbers.length;", "  num sum = 0;", "  numbers.forEach((x) => sum += x);", "  num mean = sum / n;", "  num sumSquare = 0;", "  numbers.forEach((x) => sumSquare += " + "Math.pow(x - mean, 2));", "  return Math.sqrt(sumSquare / n);", "}"
            ]);
            code = functionName + "(" + list + ")";
            break;
        case "RANDOM":
            Blockly.Dart.definitions_["import_dart_math"] =
                "import 'dart:math' as Math;";
            var functionName = Blockly.Dart.provideFunction_("math_random_item", ["dynamic " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(List myList) {", "  int x = new Math.Random().nextInt(myList.length);", "  return myList[x];", "}"]);
            code = functionName + "(" + list + ")";
            break;
        default:
            throw Error("Unknown operator: " + func);
    }
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["math_modulo"] = function(block) {
    var argument0 = Blockly.Dart.valueToCode(block, "DIVIDEND", Blockly.Dart.ORDER_MULTIPLICATIVE) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "DIVISOR", Blockly.Dart.ORDER_MULTIPLICATIVE) || "0";
    var code = argument0 + " % " + argument1;
    return [code, Blockly.Dart.ORDER_MULTIPLICATIVE]
};
Blockly.Dart["math_constrain"] = function(block) {
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var argument0 = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_NONE) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "LOW", Blockly.Dart.ORDER_NONE) || "0";
    var argument2 = Blockly.Dart.valueToCode(block, "HIGH", Blockly.Dart.ORDER_NONE) || "double.infinity";
    var code = "Math.min(Math.max(" + argument0 + ", " + argument1 + "), " + argument2 + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["math_random_int"] = function(block) {
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var argument0 = Blockly.Dart.valueToCode(block, "FROM", Blockly.Dart.ORDER_NONE) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "TO", Blockly.Dart.ORDER_NONE) || "0";
    var functionName = Blockly.Dart.provideFunction_("math_random_int", ["int " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(num a, num b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    num c = a;", "    a = b;",
        "    b = c;", "  }", "  return new Math.Random().nextInt(b - a + 1) + a;", "}"
    ]);
    var code = functionName + "(" + argument0 + ", " + argument1 + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["math_random_float"] = function(block) {
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    return ["new Math.Random().nextDouble()", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["math_atan2"] = function(block) {
    Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
    var argument0 = Blockly.Dart.valueToCode(block, "X", Blockly.Dart.ORDER_NONE) || "0";
    var argument1 = Blockly.Dart.valueToCode(block, "Y", Blockly.Dart.ORDER_NONE) || "0";
    return ["Math.atan2(" + argument1 + ", " + argument0 + ") / Math.pi * 180", Blockly.Dart.ORDER_MULTIPLICATIVE]
};
goog.provide("Blockly.Dart.procedures");
goog.require("Blockly.Dart");
Blockly.Dart["procedures_defreturn"] = function(block) {
    var funcName = Blockly.Dart.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var branch = Blockly.Dart.statementToCode(block, "STACK");
    if (Blockly.Dart.STATEMENT_PREFIX) {
        var id = block.id.replace(/\$/g, "$$$$");
        branch = Blockly.Dart.prefixLines(Blockly.Dart.STATEMENT_PREFIX.replace(/%1/g, "'" + id + "'"), Blockly.Dart.INDENT) + branch
    }
    if (Blockly.Dart.INFINITE_LOOP_TRAP) branch = Blockly.Dart.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + block.id +
        "'") + branch;
    var returnValue = Blockly.Dart.valueToCode(block, "RETURN", Blockly.Dart.ORDER_NONE) || "";
    if (returnValue) returnValue = Blockly.Dart.INDENT + "return " + returnValue + ";\n";
    var returnType = returnValue ? "dynamic" : "void";
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.Dart.variableDB_.getName(block.arguments_[i], Blockly.Variables.NAME_TYPE);
    var code = returnType + " " + funcName + "(" + args.join(", ") + ") {\n" + branch + returnValue + "}";
    code = Blockly.Dart.scrub_(block, code);
    Blockly.Dart.definitions_["%" +
        funcName] = code;
    return null
};
Blockly.Dart["procedures_defnoreturn"] = Blockly.Dart["procedures_defreturn"];
Blockly.Dart["procedures_callreturn"] = function(block) {
    var funcName = Blockly.Dart.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.Dart.valueToCode(block, "ARG" + i, Blockly.Dart.ORDER_NONE) || "null";
    var code = funcName + "(" + args.join(", ") + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["procedures_callnoreturn"] = function(block) {
    var funcName = Blockly.Dart.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.Dart.valueToCode(block, "ARG" + i, Blockly.Dart.ORDER_NONE) || "null";
    var code = funcName + "(" + args.join(", ") + ");\n";
    return code
};
Blockly.Dart["procedures_ifreturn"] = function(block) {
    var condition = Blockly.Dart.valueToCode(block, "CONDITION", Blockly.Dart.ORDER_NONE) || "false";
    var code = "if (" + condition + ") {\n";
    if (block.hasReturnValue_) {
        var value = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_NONE) || "null";
        code += Blockly.Dart.INDENT + "return " + value + ";\n"
    } else code += Blockly.Dart.INDENT + "return;\n";
    code += "}\n";
    return code
};
goog.provide("Blockly.Dart.texts");
goog.require("Blockly.Dart");
Blockly.Dart.addReservedWords("Html,Math");
Blockly.Dart["text"] = function(block) {
    var code = Blockly.Dart.quote_(block.getFieldValue("TEXT"));
    return [code, Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["text_join"] = function(block) {
    switch (block.itemCount_) {
        case 0:
            return ["''", Blockly.Dart.ORDER_ATOMIC];
        case 1:
            var element = Blockly.Dart.valueToCode(block, "ADD0", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
            var code = element + ".toString()";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
        default:
            var elements = new Array(block.itemCount_);
            for (var i = 0; i < block.itemCount_; i++) elements[i] = Blockly.Dart.valueToCode(block, "ADD" + i, Blockly.Dart.ORDER_NONE) || "''";
            var code = "[" + elements.join(",") + "].join()";
            return [code,
                Blockly.Dart.ORDER_UNARY_POSTFIX
            ]
    }
};
Blockly.Dart["text_append"] = function(block) {
    var varName = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var value = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_NONE) || "''";
    return varName + " = [" + varName + ", " + value + "].join();\n"
};
Blockly.Dart["text_length"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    return [text + ".length", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_isEmpty"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    return [text + ".isEmpty", Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_indexOf"] = function(block) {
    var operator = block.getFieldValue("END") == "FIRST" ? "indexOf" : "lastIndexOf";
    var substring = Blockly.Dart.valueToCode(block, "FIND", Blockly.Dart.ORDER_NONE) || "''";
    var text = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    var code = text + "." + operator + "(" + substring + ")";
    if (block.workspace.options.oneBasedIndex) return [code + " + 1", Blockly.Dart.ORDER_ADDITIVE];
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_charAt"] = function(block) {
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var text = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    switch (where) {
        case "FIRST":
            var code = text + "[0]";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
        case "FROM_START":
            var at = Blockly.Dart.getAdjusted(block, "AT");
            var code = text + "[" + at + "]";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
        case "LAST":
            at = 1;
        case "FROM_END":
            var at = Blockly.Dart.getAdjusted(block, "AT", 1);
            var functionName =
                Blockly.Dart.provideFunction_("text_get_from_end", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String text, num x) {", "  return text[text.length - x];", "}"]);
            code = functionName + "(" + text + ", " + at + ")";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];
        case "RANDOM":
            Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
            var functionName = Blockly.Dart.provideFunction_("text_random_letter", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String text) {", "  int x = new Math.Random().nextInt(text.length);",
                "  return text[x];", "}"
            ]);
            code = functionName + "(" + text + ")";
            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
    }
    throw Error("Unhandled option (text_charAt).");
};
Blockly.Dart["text_getSubstring"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "STRING", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    var where1 = block.getFieldValue("WHERE1");
    var where2 = block.getFieldValue("WHERE2");
    if (where1 == "FIRST" && where2 == "LAST") var code = text;
    else if (text.match(/^'?\w+'?$/) || where1 != "FROM_END" && where2 == "FROM_START") {
        switch (where1) {
            case "FROM_START":
                var at1 = Blockly.Dart.getAdjusted(block, "AT1");
                break;
            case "FROM_END":
                var at1 = Blockly.Dart.getAdjusted(block, "AT1", 1, false, Blockly.Dart.ORDER_ADDITIVE);
                at1 = text + ".length - " + at1;
                break;
            case "FIRST":
                var at1 = "0";
                break;
            default:
                throw Error("Unhandled option (text_getSubstring).");
        }
        switch (where2) {
            case "FROM_START":
                var at2 = Blockly.Dart.getAdjusted(block, "AT2", 1);
                break;
            case "FROM_END":
                var at2 = Blockly.Dart.getAdjusted(block, "AT2", 0, false, Blockly.Dart.ORDER_ADDITIVE);
                at2 = text + ".length - " + at2;
                break;
            case "LAST":
                break;
            default:
                throw Error("Unhandled option (text_getSubstring).");
        }
        if (where2 == "LAST") var code = text + ".substring(" + at1 + ")";
        else var code = text + ".substring(" +
            at1 + ", " + at2 + ")"
    } else {
        var at1 = Blockly.Dart.getAdjusted(block, "AT1");
        var at2 = Blockly.Dart.getAdjusted(block, "AT2");
        var functionName = Blockly.Dart.provideFunction_("text_get_substring", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String text, String where1, num at1, String where2, num at2) {", "  int getAt(String where, num at) {", "    if (where == 'FROM_END') {", "      at = text.length - 1 - at;", "    } else if (where == 'FIRST') {", "      at = 0;", "    } else if (where == 'LAST') {", "      at = text.length - 1;",
            "    } else if (where != 'FROM_START') {", "      throw 'Unhandled option (text_getSubstring).';", "    }", "    return at;", "  }", "  at1 = getAt(where1, at1);", "  at2 = getAt(where2, at2) + 1;", "  return text.substring(at1, at2);", "}"
        ]);
        var code = functionName + "(" + text + ", '" + where1 + "', " + at1 + ", '" + where2 + "', " + at2 + ")"
    }
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_changeCase"] = function(block) {
    var OPERATORS = {
        "UPPERCASE": ".toUpperCase()",
        "LOWERCASE": ".toLowerCase()",
        "TITLECASE": null
    };
    var operator = OPERATORS[block.getFieldValue("CASE")];
    var textOrder = operator ? Blockly.Dart.ORDER_UNARY_POSTFIX : Blockly.Dart.ORDER_NONE;
    var text = Blockly.Dart.valueToCode(block, "TEXT", textOrder) || "''";
    if (operator) var code = text + operator;
    else {
        var functionName = Blockly.Dart.provideFunction_("text_toTitleCase", ["String " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String str) {",
            "  RegExp exp = new RegExp(r'\\b');", "  List<String> list = str.split(exp);", "  final title = new StringBuffer();", "  for (String part in list) {", "    if (part.length > 0) {", "      title.write(part[0].toUpperCase());", "      if (part.length > 0) {", "        title.write(part.substring(1).toLowerCase());", "      }", "    }", "  }", "  return title.toString();", "}"
        ]);
        var code = functionName + "(" + text + ")"
    }
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_trim"] = function(block) {
    var OPERATORS = {
        "LEFT": ".replaceFirst(new RegExp(r'^\\s+'), '')",
        "RIGHT": ".replaceFirst(new RegExp(r'\\s+$'), '')",
        "BOTH": ".trim()"
    };
    var operator = OPERATORS[block.getFieldValue("MODE")];
    var text = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    return [text + operator, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_print"] = function(block) {
    var msg = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_NONE) || "''";
    return "print(" + msg + ");\n"
};
Blockly.Dart["text_prompt_ext"] = function(block) {
    Blockly.Dart.definitions_["import_dart_html"] = "import 'dart:html' as Html;";
    if (block.getField("TEXT")) var msg = Blockly.Dart.quote_(block.getFieldValue("TEXT"));
    else var msg = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_NONE) || "''";
    var code = "Html.window.prompt(" + msg + ", '')";
    var toNumber = block.getFieldValue("TYPE") == "NUMBER";
    if (toNumber) {
        Blockly.Dart.definitions_["import_dart_math"] = "import 'dart:math' as Math;";
        code = "Math.parseDouble(" + code +
            ")"
    }
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_prompt"] = Blockly.Dart["text_prompt_ext"];
Blockly.Dart["text_count"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    var sub = Blockly.Dart.valueToCode(block, "SUB", Blockly.Dart.ORDER_NONE) || "''";
    var functionName = Blockly.Dart.provideFunction_("text_count", ["int " + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + "(String haystack, String needle) {", "  if (needle.length == 0) {", "    return haystack.length + 1;", "  }", "  int index = 0;", "  int count = 0;", "  while (index != -1) {", "    index = haystack.indexOf(needle, index);",
        "    if (index != -1) {", "      count++;", "     index += needle.length;", "    }", "  }", "  return count;", "}"
    ]);
    var code = functionName + "(" + text + ", " + sub + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_replace"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    var from = Blockly.Dart.valueToCode(block, "FROM", Blockly.Dart.ORDER_NONE) || "''";
    var to = Blockly.Dart.valueToCode(block, "TO", Blockly.Dart.ORDER_NONE) || "''";
    var code = text + ".replaceAll(" + from + ", " + to + ")";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
Blockly.Dart["text_reverse"] = function(block) {
    var text = Blockly.Dart.valueToCode(block, "TEXT", Blockly.Dart.ORDER_UNARY_POSTFIX) || "''";
    var code = "new String.fromCharCodes(" + text + ".runes.toList().reversed)";
    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX]
};
goog.provide("Blockly.Dart.variables");
goog.require("Blockly.Dart");
Blockly.Dart["variables_get"] = function(block) {
    var code = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return [code, Blockly.Dart.ORDER_ATOMIC]
};
Blockly.Dart["variables_set"] = function(block) {
    var argument0 = Blockly.Dart.valueToCode(block, "VALUE", Blockly.Dart.ORDER_ASSIGNMENT) || "0";
    var varName = Blockly.Dart.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return varName + " = " + argument0 + ";\n"
};
goog.provide("Blockly.Dart.variablesDynamic");
goog.require("Blockly.Dart");
goog.require("Blockly.Dart.variables");
Blockly.Dart["variables_get_dynamic"] = Blockly.Dart["variables_get"];
Blockly.Dart["variables_set_dynamic"] = Blockly.Dart["variables_set"];