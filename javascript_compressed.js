// Do not edit this file; automatically generated by build.py.
'use strict';

goog.provide("Blockly.Generator");
goog.provide("Blockly.JavaScript");
goog.require("Blockly.Generator");
Blockly.JavaScript = new Blockly.Generator("JavaScript");
Blockly.JavaScript.addReservedWords("Blockly," + "break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with," + "class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield," + "const,null,true,false," + "Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError," + "applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window," +
    "addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper," +
    "onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide," + "Image,Option,Worker," + "Event,Range,File,FileReader,Blob,BlobBuilder," + "Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope," +
    "HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement," +
    "HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList," + "SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement," +
    "SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList," + "SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList," + "SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData," +
    "SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan");
Blockly.JavaScript.ORDER_ATOMIC = 0;
Blockly.JavaScript.ORDER_NEW = 1.1;
Blockly.JavaScript.ORDER_MEMBER = 1.2;
Blockly.JavaScript.ORDER_FUNCTION_CALL = 2;
Blockly.JavaScript.ORDER_INCREMENT = 3;
Blockly.JavaScript.ORDER_DECREMENT = 3;
Blockly.JavaScript.ORDER_BITWISE_NOT = 4.1;
Blockly.JavaScript.ORDER_UNARY_PLUS = 4.2;
Blockly.JavaScript.ORDER_UNARY_NEGATION = 4.3;
Blockly.JavaScript.ORDER_LOGICAL_NOT = 4.4;
Blockly.JavaScript.ORDER_TYPEOF = 4.5;
Blockly.JavaScript.ORDER_VOID = 4.6;
Blockly.JavaScript.ORDER_DELETE = 4.7;
Blockly.JavaScript.ORDER_AWAIT = 4.8;
Blockly.JavaScript.ORDER_EXPONENTIATION = 5;
Blockly.JavaScript.ORDER_MULTIPLICATION = 5.1;
Blockly.JavaScript.ORDER_DIVISION = 5.2;
Blockly.JavaScript.ORDER_MODULUS = 5.3;
Blockly.JavaScript.ORDER_SUBTRACTION = 6.1;
Blockly.JavaScript.ORDER_ADDITION = 6.2;
Blockly.JavaScript.ORDER_BITWISE_SHIFT = 7;
Blockly.JavaScript.ORDER_RELATIONAL = 8;
Blockly.JavaScript.ORDER_IN = 8;
Blockly.JavaScript.ORDER_INSTANCEOF = 8;
Blockly.JavaScript.ORDER_EQUALITY = 9;
Blockly.JavaScript.ORDER_BITWISE_AND = 10;
Blockly.JavaScript.ORDER_BITWISE_XOR = 11;
Blockly.JavaScript.ORDER_BITWISE_OR = 12;
Blockly.JavaScript.ORDER_LOGICAL_AND = 13;
Blockly.JavaScript.ORDER_LOGICAL_OR = 14;
Blockly.JavaScript.ORDER_CONDITIONAL = 15;
Blockly.JavaScript.ORDER_ASSIGNMENT = 16;
Blockly.JavaScript.ORDER_YIELD = 17;
Blockly.JavaScript.ORDER_COMMA = 18;
Blockly.JavaScript.ORDER_NONE = 99;
Blockly.JavaScript.ORDER_OVERRIDES = [
    [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_MEMBER],
    [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_FUNCTION_CALL],
    [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_MEMBER],
    [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_FUNCTION_CALL],
    [Blockly.JavaScript.ORDER_LOGICAL_NOT, Blockly.JavaScript.ORDER_LOGICAL_NOT],
    [Blockly.JavaScript.ORDER_MULTIPLICATION, Blockly.JavaScript.ORDER_MULTIPLICATION],
    [Blockly.JavaScript.ORDER_ADDITION,
        Blockly.JavaScript.ORDER_ADDITION
    ],
    [Blockly.JavaScript.ORDER_LOGICAL_AND, Blockly.JavaScript.ORDER_LOGICAL_AND],
    [Blockly.JavaScript.ORDER_LOGICAL_OR, Blockly.JavaScript.ORDER_LOGICAL_OR]
];
Blockly.JavaScript.init = function(workspace) {
    Blockly.JavaScript.definitions_ = Object.create(null);
    Blockly.JavaScript.functionNames_ = Object.create(null);
    if (!Blockly.JavaScript.variableDB_) Blockly.JavaScript.variableDB_ = new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);
    else Blockly.JavaScript.variableDB_.reset();
    Blockly.JavaScript.variableDB_.setVariableMap(workspace.getVariableMap());
    var defvars = [];
    var devVarList = Blockly.Variables.allDeveloperVariables(workspace);
    for (var i = 0; i < devVarList.length; i++) defvars.push(Blockly.JavaScript.variableDB_.getName(devVarList[i],
        Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    var variables = Blockly.Variables.allUsedVarModels(workspace);
    for (var i = 0; i < variables.length; i++) defvars.push(Blockly.JavaScript.variableDB_.getName(variables[i].getId(), Blockly.Variables.NAME_TYPE));
    if (defvars.length) Blockly.JavaScript.definitions_["variables"] = "var " + defvars.join(", ") + ";"
};
Blockly.JavaScript.finish = function(code) {
    var definitions = [];
    for (var name in Blockly.JavaScript.definitions_) definitions.push(Blockly.JavaScript.definitions_[name]);
    delete Blockly.JavaScript.definitions_;
    delete Blockly.JavaScript.functionNames_;
    Blockly.JavaScript.variableDB_.reset();
    return definitions.join("\n\n") + "\n\n\n" + code
};
Blockly.JavaScript.scrubNakedValue = function(line) {
    return line + ";\n"
};
Blockly.JavaScript.quote_ = function(string) {
    string = string.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "'" + string + "'"
};
Blockly.JavaScript.scrub_ = function(block, code) {
    var commentCode = "";
    if (!block.outputConnection || !block.outputConnection.targetConnection) {
        var comment = block.getCommentText();
        comment = Blockly.utils.wrap(comment, Blockly.JavaScript.COMMENT_WRAP - 3);
        if (comment)
            if (block.getProcedureDef) commentCode += "/**\n" + Blockly.JavaScript.prefixLines(comment + "\n", " * ") + " */\n";
            else commentCode += Blockly.JavaScript.prefixLines(comment + "\n", "// ");
        for (var i = 0; i < block.inputList.length; i++)
            if (block.inputList[i].type == Blockly.INPUT_VALUE) {
                var childBlock =
                    block.inputList[i].connection.targetBlock();
                if (childBlock) {
                    var comment = Blockly.JavaScript.allNestedComments(childBlock);
                    if (comment) commentCode += Blockly.JavaScript.prefixLines(comment, "// ")
                }
            }
    }
    var nextBlock = block.nextConnection && block.nextConnection.targetBlock();
    var nextCode = Blockly.JavaScript.blockToCode(nextBlock);
    return commentCode + code + nextCode
};
Blockly.JavaScript.getAdjusted = function(block, atId, opt_delta, opt_negate, opt_order) {
    var delta = opt_delta || 0;
    var order = opt_order || Blockly.JavaScript.ORDER_NONE;
    if (block.workspace.options.oneBasedIndex) delta--;
    var defaultAtIndex = block.workspace.options.oneBasedIndex ? "1" : "0";
    if (delta > 0) var at = Blockly.JavaScript.valueToCode(block, atId, Blockly.JavaScript.ORDER_ADDITION) || defaultAtIndex;
    else if (delta < 0) var at = Blockly.JavaScript.valueToCode(block, atId, Blockly.JavaScript.ORDER_SUBTRACTION) || defaultAtIndex;
    else if (opt_negate) var at = Blockly.JavaScript.valueToCode(block, atId, Blockly.JavaScript.ORDER_UNARY_NEGATION) || defaultAtIndex;
    else var at = Blockly.JavaScript.valueToCode(block, atId, order) || defaultAtIndex;
    if (Blockly.isNumber(at)) {
        at = parseFloat(at) + delta;
        if (opt_negate) at = -at
    } else {
        if (delta > 0) {
            at = at + " + " + delta;
            var innerOrder = Blockly.JavaScript.ORDER_ADDITION
        } else if (delta < 0) {
            at = at + " - " + -delta;
            var innerOrder = Blockly.JavaScript.ORDER_SUBTRACTION
        }
        if (opt_negate) {
            if (delta) at = "-(" + at + ")";
            else at = "-" + at;
            var innerOrder =
                Blockly.JavaScript.ORDER_UNARY_NEGATION
        }
        innerOrder = Math.floor(innerOrder);
        order = Math.floor(order);
        if (innerOrder && order >= innerOrder) at = "(" + at + ")"
    }
    return at
};
goog.provide("Blockly.JavaScript.colour");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["colour_picker"] = function(block) {
    var code = "'" + block.getFieldValue("COLOUR") + "'";
    return [code, Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["colour_random"] = function(block) {
    var functionName = Blockly.JavaScript.provideFunction_("colourRandom", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  var num = Math.floor(Math.random() * Math.pow(2, 24));", "  return '#' + ('00000' + num.toString(16)).substr(-6);", "}"]);
    var code = functionName + "()";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["colour_rgb"] = function(block) {
    var red = Blockly.JavaScript.valueToCode(block, "RED", Blockly.JavaScript.ORDER_COMMA) || 0;
    var green = Blockly.JavaScript.valueToCode(block, "GREEN", Blockly.JavaScript.ORDER_COMMA) || 0;
    var blue = Blockly.JavaScript.valueToCode(block, "BLUE", Blockly.JavaScript.ORDER_COMMA) || 0;
    var functionName = Blockly.JavaScript.provideFunction_("colourRgb", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b) {", "  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;",
        "  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;", "  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;", "  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);", "  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);", "  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"
    ]);
    var code = functionName + "(" + red + ", " + green + ", " + blue + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["colour_blend"] = function(block) {
    var c1 = Blockly.JavaScript.valueToCode(block, "COLOUR1", Blockly.JavaScript.ORDER_COMMA) || "'#000000'";
    var c2 = Blockly.JavaScript.valueToCode(block, "COLOUR2", Blockly.JavaScript.ORDER_COMMA) || "'#000000'";
    var ratio = Blockly.JavaScript.valueToCode(block, "RATIO", Blockly.JavaScript.ORDER_COMMA) || .5;
    var functionName = Blockly.JavaScript.provideFunction_("colourBlend", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(c1, c2, ratio) {", "  ratio = Math.max(Math.min(Number(ratio), 1), 0);",
        "  var r1 = parseInt(c1.substring(1, 3), 16);", "  var g1 = parseInt(c1.substring(3, 5), 16);", "  var b1 = parseInt(c1.substring(5, 7), 16);", "  var r2 = parseInt(c2.substring(1, 3), 16);", "  var g2 = parseInt(c2.substring(3, 5), 16);", "  var b2 = parseInt(c2.substring(5, 7), 16);", "  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);", "  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);", "  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);", "  r = ('0' + (r || 0).toString(16)).slice(-2);", "  g = ('0' + (g || 0).toString(16)).slice(-2);",
        "  b = ('0' + (b || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"
    ]);
    var code = functionName + "(" + c1 + ", " + c2 + ", " + ratio + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
goog.provide("Blockly.JavaScript.lists");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["lists_create_empty"] = function(block) {
    return ["[]", Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["lists_create_with"] = function(block) {
    var elements = new Array(block.itemCount_);
    for (var i = 0; i < block.itemCount_; i++) elements[i] = Blockly.JavaScript.valueToCode(block, "ADD" + i, Blockly.JavaScript.ORDER_COMMA) || "null";
    var code = "[" + elements.join(", ") + "]";
    return [code, Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["lists_repeat"] = function(block) {
    var functionName = Blockly.JavaScript.provideFunction_("listsRepeat", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(value, n) {", "  var array = [];", "  for (var i = 0; i < n; i++) {", "    array[i] = value;", "  }", "  return array;", "}"]);
    var element = Blockly.JavaScript.valueToCode(block, "ITEM", Blockly.JavaScript.ORDER_COMMA) || "null";
    var repeatCount = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_COMMA) || "0";
    var code =
        functionName + "(" + element + ", " + repeatCount + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["lists_length"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_MEMBER) || "[]";
    return [list + ".length", Blockly.JavaScript.ORDER_MEMBER]
};
Blockly.JavaScript["lists_isEmpty"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_MEMBER) || "[]";
    return ["!" + list + ".length", Blockly.JavaScript.ORDER_LOGICAL_NOT]
};
Blockly.JavaScript["lists_indexOf"] = function(block) {
    var operator = block.getFieldValue("END") == "FIRST" ? "indexOf" : "lastIndexOf";
    var item = Blockly.JavaScript.valueToCode(block, "FIND", Blockly.JavaScript.ORDER_NONE) || "''";
    var list = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_MEMBER) || "[]";
    var code = list + "." + operator + "(" + item + ")";
    if (block.workspace.options.oneBasedIndex) return [code + " + 1", Blockly.JavaScript.ORDER_ADDITION];
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["lists_getIndex"] = function(block) {
    var mode = block.getFieldValue("MODE") || "GET";
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var listOrder = where == "RANDOM" ? Blockly.JavaScript.ORDER_COMMA : Blockly.JavaScript.ORDER_MEMBER;
    var list = Blockly.JavaScript.valueToCode(block, "VALUE", listOrder) || "[]";
    switch (where) {
        case "FIRST":
            if (mode == "GET") {
                var code = list + "[0]";
                return [code, Blockly.JavaScript.ORDER_MEMBER]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".shift()";
                return [code, Blockly.JavaScript.ORDER_MEMBER]
            } else if (mode ==
                "REMOVE") return list + ".shift();\n";
            break;
        case "LAST":
            if (mode == "GET") {
                var code = list + ".slice(-1)[0]";
                return [code, Blockly.JavaScript.ORDER_MEMBER]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".pop()";
                return [code, Blockly.JavaScript.ORDER_MEMBER]
            } else if (mode == "REMOVE") return list + ".pop();\n";
            break;
        case "FROM_START":
            var at = Blockly.JavaScript.getAdjusted(block, "AT");
            if (mode == "GET") {
                var code = list + "[" + at + "]";
                return [code, Blockly.JavaScript.ORDER_MEMBER]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".splice(" + at +
                    ", 1)[0]";
                return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
            } else if (mode == "REMOVE") return list + ".splice(" + at + ", 1);\n";
            break;
        case "FROM_END":
            var at = Blockly.JavaScript.getAdjusted(block, "AT", 1, true);
            if (mode == "GET") {
                var code = list + ".slice(" + at + ")[0]";
                return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
            } else if (mode == "GET_REMOVE") {
                var code = list + ".splice(" + at + ", 1)[0]";
                return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
            } else if (mode == "REMOVE") return list + ".splice(" + at + ", 1);";
            break;
        case "RANDOM":
            var functionName =
                Blockly.JavaScript.provideFunction_("listsGetRandomItem", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(list, remove) {", "  var x = Math.floor(Math.random() * list.length);", "  if (remove) {", "    return list.splice(x, 1)[0];", "  } else {", "    return list[x];", "  }", "}"]);
            code = functionName + "(" + list + ", " + (mode != "GET") + ")";
            if (mode == "GET" || mode == "GET_REMOVE") return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
            else if (mode == "REMOVE") return code + ";\n";
            break
    }
    throw Error("Unhandled combination (lists_getIndex).");
};
Blockly.JavaScript["lists_setIndex"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_MEMBER) || "[]";
    var mode = block.getFieldValue("MODE") || "GET";
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var value = Blockly.JavaScript.valueToCode(block, "TO", Blockly.JavaScript.ORDER_ASSIGNMENT) || "null";

    function cacheList() {
        if (list.match(/^\w+$/)) return "";
        var listVar = Blockly.JavaScript.variableDB_.getDistinctName("tmpList", Blockly.Variables.NAME_TYPE);
        var code = "var " +
            listVar + " = " + list + ";\n";
        list = listVar;
        return code
    }
    switch (where) {
        case "FIRST":
            if (mode == "SET") return list + "[0] = " + value + ";\n";
            else if (mode == "INSERT") return list + ".unshift(" + value + ");\n";
            break;
        case "LAST":
            if (mode == "SET") {
                var code = cacheList();
                code += list + "[" + list + ".length - 1] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") return list + ".push(" + value + ");\n";
            break;
        case "FROM_START":
            var at = Blockly.JavaScript.getAdjusted(block, "AT");
            if (mode == "SET") return list + "[" + at + "] = " + value + ";\n";
            else if (mode == "INSERT") return list +
                ".splice(" + at + ", 0, " + value + ");\n";
            break;
        case "FROM_END":
            var at = Blockly.JavaScript.getAdjusted(block, "AT", 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);
            var code = cacheList();
            if (mode == "SET") {
                code += list + "[" + list + ".length - " + at + "] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") {
                code += list + ".splice(" + list + ".length - " + at + ", 0, " + value + ");\n";
                return code
            }
            break;
        case "RANDOM":
            var code = cacheList();
            var xVar = Blockly.JavaScript.variableDB_.getDistinctName("tmpX", Blockly.Variables.NAME_TYPE);
            code += "var " +
                xVar + " = Math.floor(Math.random() * " + list + ".length);\n";
            if (mode == "SET") {
                code += list + "[" + xVar + "] = " + value + ";\n";
                return code
            } else if (mode == "INSERT") {
                code += list + ".splice(" + xVar + ", 0, " + value + ");\n";
                return code
            }
            break
    }
    throw Error("Unhandled combination (lists_setIndex).");
};
Blockly.JavaScript.lists.getIndex_ = function(listName, where, opt_at) {
    if (where == "FIRST") return "0";
    else if (where == "FROM_END") return listName + ".length - 1 - " + opt_at;
    else if (where == "LAST") return listName + ".length - 1";
    else return opt_at
};
Blockly.JavaScript["lists_getSublist"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_MEMBER) || "[]";
    var where1 = block.getFieldValue("WHERE1");
    var where2 = block.getFieldValue("WHERE2");
    if (where1 == "FIRST" && where2 == "LAST") var code = list + ".slice(0)";
    else if (list.match(/^\w+$/) || where1 != "FROM_END" && where2 == "FROM_START") {
        switch (where1) {
            case "FROM_START":
                var at1 = Blockly.JavaScript.getAdjusted(block, "AT1");
                break;
            case "FROM_END":
                var at1 = Blockly.JavaScript.getAdjusted(block,
                    "AT1", 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);
                at1 = list + ".length - " + at1;
                break;
            case "FIRST":
                var at1 = "0";
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        switch (where2) {
            case "FROM_START":
                var at2 = Blockly.JavaScript.getAdjusted(block, "AT2", 1);
                break;
            case "FROM_END":
                var at2 = Blockly.JavaScript.getAdjusted(block, "AT2", 0, false, Blockly.JavaScript.ORDER_SUBTRACTION);
                at2 = list + ".length - " + at2;
                break;
            case "LAST":
                var at2 = list + ".length";
                break;
            default:
                throw Error("Unhandled option (lists_getSublist).");
        }
        code = list + ".slice(" + at1 + ", " + at2 + ")"
    } else {
        var at1 = Blockly.JavaScript.getAdjusted(block, "AT1");
        var at2 = Blockly.JavaScript.getAdjusted(block, "AT2");
        var getIndex_ = Blockly.JavaScript.lists.getIndex_;
        var wherePascalCase = {
            "FIRST": "First",
            "LAST": "Last",
            "FROM_START": "FromStart",
            "FROM_END": "FromEnd"
        };
        var functionName = Blockly.JavaScript.provideFunction_("subsequence" + wherePascalCase[where1] + wherePascalCase[where2], ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + (where1 == "FROM_END" ||
            where1 == "FROM_START" ? ", at1" : "") + (where2 == "FROM_END" || where2 == "FROM_START" ? ", at2" : "") + ") {", "  var start = " + getIndex_("sequence", where1, "at1") + ";", "  var end = " + getIndex_("sequence", where2, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]);
        var code = functionName + "(" + list + (where1 == "FROM_END" || where1 == "FROM_START" ? ", " + at1 : "") + (where2 == "FROM_END" || where2 == "FROM_START" ? ", " + at2 : "") + ")"
    }
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["lists_sort"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_FUNCTION_CALL) || "[]";
    var direction = block.getFieldValue("DIRECTION") === "1" ? 1 : -1;
    var type = block.getFieldValue("TYPE");
    var getCompareFunctionName = Blockly.JavaScript.provideFunction_("listsGetSortCompare", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(type, direction) {", "  var compareFuncs = {", '    "NUMERIC": function(a, b) {', "        return parseFloat(a) - parseFloat(b); },",
        '    "TEXT": function(a, b) {', "        return a.toString() > b.toString() ? 1 : -1; },", '    "IGNORE_CASE": function(a, b) {', "        return a.toString().toLowerCase() > " + "b.toString().toLowerCase() ? 1 : -1; },", "  };", "  var compare = compareFuncs[type];", "  return function(a, b) { return compare(a, b) * direction; }", "}"
    ]);
    return [list + ".slice().sort(" + getCompareFunctionName + '("' + type + '", ' + direction + "))", Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["lists_split"] = function(block) {
    var input = Blockly.JavaScript.valueToCode(block, "INPUT", Blockly.JavaScript.ORDER_MEMBER);
    var delimiter = Blockly.JavaScript.valueToCode(block, "DELIM", Blockly.JavaScript.ORDER_NONE) || "''";
    var mode = block.getFieldValue("MODE");
    if (mode == "SPLIT") {
        if (!input) input = "''";
        var functionName = "split"
    } else if (mode == "JOIN") {
        if (!input) input = "[]";
        var functionName = "join"
    } else throw Error("Unknown mode: " + mode);
    var code = input + "." + functionName + "(" + delimiter + ")";
    return [code,
        Blockly.JavaScript.ORDER_FUNCTION_CALL
    ]
};
Blockly.JavaScript["lists_reverse"] = function(block) {
    var list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_FUNCTION_CALL) || "[]";
    var code = list + ".slice().reverse()";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
goog.provide("Blockly.JavaScript.logic");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["controls_if"] = function(block) {
    var n = 0;
    var code = "",
        branchCode, conditionCode;
    do {
        conditionCode = Blockly.JavaScript.valueToCode(block, "IF" + n, Blockly.JavaScript.ORDER_NONE) || "false";
        branchCode = Blockly.JavaScript.statementToCode(block, "DO" + n);
        code += (n > 0 ? " else " : "") + "if (" + conditionCode + ") {\n" + branchCode + "}";
        ++n
    } while (block.getInput("IF" + n));
    if (block.getInput("ELSE")) {
        branchCode = Blockly.JavaScript.statementToCode(block, "ELSE");
        code += " else {\n" + branchCode + "}"
    }
    return code + "\n"
};
Blockly.JavaScript["controls_ifelse"] = Blockly.JavaScript["controls_if"];
Blockly.JavaScript["logic_compare"] = function(block) {
    var OPERATORS = {
        "EQ": "==",
        "NEQ": "!=",
        "LT": "<",
        "LTE": "<=",
        "GT": ">",
        "GTE": ">="
    };
    var operator = OPERATORS[block.getFieldValue("OP")];
    var order = operator == "==" || operator == "!=" ? Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL;
    var argument0 = Blockly.JavaScript.valueToCode(block, "A", order) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "B", order) || "0";
    var code = argument0 + " " + operator + " " + argument1;
    return [code, order]
};
Blockly.JavaScript["logic_operation"] = function(block) {
    var operator = block.getFieldValue("OP") == "AND" ? "&&" : "||";
    var order = operator == "&&" ? Blockly.JavaScript.ORDER_LOGICAL_AND : Blockly.JavaScript.ORDER_LOGICAL_OR;
    var argument0 = Blockly.JavaScript.valueToCode(block, "A", order);
    var argument1 = Blockly.JavaScript.valueToCode(block, "B", order);
    if (!argument0 && !argument1) {
        argument0 = "false";
        argument1 = "false"
    } else {
        var defaultArgument = operator == "&&" ? "true" : "false";
        if (!argument0) argument0 = defaultArgument;
        if (!argument1) argument1 =
            defaultArgument
    }
    var code = argument0 + " " + operator + " " + argument1;
    return [code, order]
};
Blockly.JavaScript["logic_negate"] = function(block) {
    var order = Blockly.JavaScript.ORDER_LOGICAL_NOT;
    var argument0 = Blockly.JavaScript.valueToCode(block, "BOOL", order) || "true";
    var code = "!" + argument0;
    return [code, order]
};
Blockly.JavaScript["logic_boolean"] = function(block) {
    var code = block.getFieldValue("BOOL") == "TRUE" ? "true" : "false";
    return [code, Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["logic_null"] = function(block) {
    return ["null", Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["logic_ternary"] = function(block) {
    var value_if = Blockly.JavaScript.valueToCode(block, "IF", Blockly.JavaScript.ORDER_CONDITIONAL) || "false";
    var value_then = Blockly.JavaScript.valueToCode(block, "THEN", Blockly.JavaScript.ORDER_CONDITIONAL) || "null";
    var value_else = Blockly.JavaScript.valueToCode(block, "ELSE", Blockly.JavaScript.ORDER_CONDITIONAL) || "null";
    var code = value_if + " ? " + value_then + " : " + value_else;
    return [code, Blockly.JavaScript.ORDER_CONDITIONAL]
};
goog.provide("Blockly.JavaScript.loops");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["controls_repeat_ext"] = function(block) {
    if (block.getField("TIMES")) var repeats = String(Number(block.getFieldValue("TIMES")));
    else var repeats = Blockly.JavaScript.valueToCode(block, "TIMES", Blockly.JavaScript.ORDER_ASSIGNMENT) || "0";
    var branch = Blockly.JavaScript.statementToCode(block, "DO");
    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);
    var code = "";
    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE);
    var endVar = repeats;
    if (!repeats.match(/^\w+$/) &&
        !Blockly.isNumber(repeats)) {
        var endVar = Blockly.JavaScript.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE);
        code += "var " + endVar + " = " + repeats + ";\n"
    }
    code += "for (var " + loopVar + " = 0; " + loopVar + " < " + endVar + "; " + loopVar + "++) {\n" + branch + "}\n";
    return code
};
Blockly.JavaScript["controls_repeat"] = Blockly.JavaScript["controls_repeat_ext"];
Blockly.JavaScript["controls_whileUntil"] = function(block) {
    var until = block.getFieldValue("MODE") == "UNTIL";
    var argument0 = Blockly.JavaScript.valueToCode(block, "BOOL", until ? Blockly.JavaScript.ORDER_LOGICAL_NOT : Blockly.JavaScript.ORDER_NONE) || "false";
    var branch = Blockly.JavaScript.statementToCode(block, "DO");
    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);
    if (until) argument0 = "!" + argument0;
    return "while (" + argument0 + ") {\n" + branch + "}\n"
};
Blockly.JavaScript["controls_for"] = function(block) {
    var variable0 = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var argument0 = Blockly.JavaScript.valueToCode(block, "FROM", Blockly.JavaScript.ORDER_ASSIGNMENT) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "TO", Blockly.JavaScript.ORDER_ASSIGNMENT) || "0";
    var increment = Blockly.JavaScript.valueToCode(block, "BY", Blockly.JavaScript.ORDER_ASSIGNMENT) || "1";
    var branch = Blockly.JavaScript.statementToCode(block,
        "DO");
    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);
    var code;
    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) && Blockly.isNumber(increment)) {
        var up = parseFloat(argument0) <= parseFloat(argument1);
        code = "for (" + variable0 + " = " + argument0 + "; " + variable0 + (up ? " <= " : " >= ") + argument1 + "; " + variable0;
        var step = Math.abs(parseFloat(increment));
        if (step == 1) code += up ? "++" : "--";
        else code += (up ? " += " : " -= ") + step;
        code += ") {\n" + branch + "}\n"
    } else {
        code = "";
        var startVar = argument0;
        if (!argument0.match(/^\w+$/) &&
            !Blockly.isNumber(argument0)) {
            startVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + "_start", Blockly.Variables.NAME_TYPE);
            code += "var " + startVar + " = " + argument0 + ";\n"
        }
        var endVar = argument1;
        if (!argument1.match(/^\w+$/) && !Blockly.isNumber(argument1)) {
            var endVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + "_end", Blockly.Variables.NAME_TYPE);
            code += "var " + endVar + " = " + argument1 + ";\n"
        }
        var incVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + "_inc", Blockly.Variables.NAME_TYPE);
        code += "var " + incVar + " = ";
        if (Blockly.isNumber(increment)) code += Math.abs(increment) + ";\n";
        else code += "Math.abs(" + increment + ");\n";
        code += "if (" + startVar + " > " + endVar + ") {\n";
        code += Blockly.JavaScript.INDENT + incVar + " = -" + incVar + ";\n";
        code += "}\n";
        code += "for (" + variable0 + " = " + startVar + "; " + incVar + " >= 0 ? " + variable0 + " <= " + endVar + " : " + variable0 + " >= " + endVar + "; " + variable0 + " += " + incVar + ") {\n" + branch + "}\n"
    }
    return code
};
Blockly.JavaScript["controls_forEach"] = function(block) {
    var variable0 = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var argument0 = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_ASSIGNMENT) || "[]";
    var branch = Blockly.JavaScript.statementToCode(block, "DO");
    branch = Blockly.JavaScript.addLoopTrap(branch, block.id);
    var code = "";
    var listVar = argument0;
    if (!argument0.match(/^\w+$/)) {
        listVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 +
            "_list", Blockly.Variables.NAME_TYPE);
        code += "var " + listVar + " = " + argument0 + ";\n"
    }
    var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + "_index", Blockly.Variables.NAME_TYPE);
    branch = Blockly.JavaScript.INDENT + variable0 + " = " + listVar + "[" + indexVar + "];\n" + branch;
    code += "for (var " + indexVar + " in " + listVar + ") {\n" + branch + "}\n";
    return code
};
Blockly.JavaScript["controls_flow_statements"] = function(block) {
    switch (block.getFieldValue("FLOW")) {
        case "BREAK":
            return "break;\n";
        case "CONTINUE":
            return "continue;\n"
    }
    throw Error("Unknown flow statement.");
};
goog.provide("Blockly.JavaScript.math");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["math_number"] = function(block) {
    var code = parseFloat(block.getFieldValue("NUM"));
    var order = code >= 0 ? Blockly.JavaScript.ORDER_ATOMIC : Blockly.JavaScript.ORDER_UNARY_NEGATION;
    return [code, order]
};
Blockly.JavaScript["math_arithmetic"] = function(block) {
    var OPERATORS = {
        "ADD": [" + ", Blockly.JavaScript.ORDER_ADDITION],
        "MINUS": [" - ", Blockly.JavaScript.ORDER_SUBTRACTION],
        "MULTIPLY": [" * ", Blockly.JavaScript.ORDER_MULTIPLICATION],
        "DIVIDE": [" / ", Blockly.JavaScript.ORDER_DIVISION],
        "POWER": [null, Blockly.JavaScript.ORDER_COMMA]
    };
    var tuple = OPERATORS[block.getFieldValue("OP")];
    var operator = tuple[0];
    var order = tuple[1];
    var argument0 = Blockly.JavaScript.valueToCode(block, "A", order) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block,
        "B", order) || "0";
    var code;
    if (!operator) {
        code = "Math.pow(" + argument0 + ", " + argument1 + ")";
        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
    }
    code = argument0 + operator + argument1;
    return [code, order]
};
Blockly.JavaScript["math_single"] = function(block) {
    var operator = block.getFieldValue("OP");
    var code;
    var arg;
    if (operator == "NEG") {
        arg = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_UNARY_NEGATION) || "0";
        if (arg[0] == "-") arg = " " + arg;
        code = "-" + arg;
        return [code, Blockly.JavaScript.ORDER_UNARY_NEGATION]
    }
    if (operator == "SIN" || operator == "COS" || operator == "TAN") arg = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_DIVISION) || "0";
    else arg = Blockly.JavaScript.valueToCode(block, "NUM",
        Blockly.JavaScript.ORDER_NONE) || "0";
    switch (operator) {
        case "ABS":
            code = "Math.abs(" + arg + ")";
            break;
        case "ROOT":
            code = "Math.sqrt(" + arg + ")";
            break;
        case "LN":
            code = "Math.log(" + arg + ")";
            break;
        case "EXP":
            code = "Math.exp(" + arg + ")";
            break;
        case "POW10":
            code = "Math.pow(10," + arg + ")";
            break;
        case "ROUND":
            code = "Math.round(" + arg + ")";
            break;
        case "ROUNDUP":
            code = "Math.ceil(" + arg + ")";
            break;
        case "ROUNDDOWN":
            code = "Math.floor(" + arg + ")";
            break;
        case "SIN":
            code = "Math.sin(" + arg + " / 180 * Math.PI)";
            break;
        case "COS":
            code = "Math.cos(" + arg +
                " / 180 * Math.PI)";
            break;
        case "TAN":
            code = "Math.tan(" + arg + " / 180 * Math.PI)";
            break
    }
    if (code) return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
    switch (operator) {
        case "LOG10":
            code = "Math.log(" + arg + ") / Math.log(10)";
            break;
        case "ASIN":
            code = "Math.asin(" + arg + ") / Math.PI * 180";
            break;
        case "ACOS":
            code = "Math.acos(" + arg + ") / Math.PI * 180";
            break;
        case "ATAN":
            code = "Math.atan(" + arg + ") / Math.PI * 180";
            break;
        default:
            throw Error("Unknown math operator: " + operator);
    }
    return [code, Blockly.JavaScript.ORDER_DIVISION]
};
Blockly.JavaScript["math_constant"] = function(block) {
    var CONSTANTS = {
        "PI": ["Math.PI", Blockly.JavaScript.ORDER_MEMBER],
        "E": ["Math.E", Blockly.JavaScript.ORDER_MEMBER],
        "GOLDEN_RATIO": ["(1 + Math.sqrt(5)) / 2", Blockly.JavaScript.ORDER_DIVISION],
        "SQRT2": ["Math.SQRT2", Blockly.JavaScript.ORDER_MEMBER],
        "SQRT1_2": ["Math.SQRT1_2", Blockly.JavaScript.ORDER_MEMBER],
        "INFINITY": ["Infinity", Blockly.JavaScript.ORDER_ATOMIC]
    };
    return CONSTANTS[block.getFieldValue("CONSTANT")]
};
Blockly.JavaScript["math_number_property"] = function(block) {
    var number_to_check = Blockly.JavaScript.valueToCode(block, "NUMBER_TO_CHECK", Blockly.JavaScript.ORDER_MODULUS) || "0";
    var dropdown_property = block.getFieldValue("PROPERTY");
    var code;
    if (dropdown_property == "PRIME") {
        var functionName = Blockly.JavaScript.provideFunction_("mathIsPrime", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;",
            "  }", "  // False if n is NaN, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.", "  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 ||" + " n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}"
        ]);
        code = functionName + "(" + number_to_check + ")";
        return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
    }
    switch (dropdown_property) {
        case "EVEN":
            code =
                number_to_check + " % 2 == 0";
            break;
        case "ODD":
            code = number_to_check + " % 2 == 1";
            break;
        case "WHOLE":
            code = number_to_check + " % 1 == 0";
            break;
        case "POSITIVE":
            code = number_to_check + " > 0";
            break;
        case "NEGATIVE":
            code = number_to_check + " < 0";
            break;
        case "DIVISIBLE_BY":
            var divisor = Blockly.JavaScript.valueToCode(block, "DIVISOR", Blockly.JavaScript.ORDER_MODULUS) || "0";
            code = number_to_check + " % " + divisor + " == 0";
            break
    }
    return [code, Blockly.JavaScript.ORDER_EQUALITY]
};
Blockly.JavaScript["math_change"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "DELTA", Blockly.JavaScript.ORDER_ADDITION) || "0";
    var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return varName + " = (typeof " + varName + " == 'number' ? " + varName + " : 0) + " + argument0 + ";\n"
};
Blockly.JavaScript["math_round"] = Blockly.JavaScript["math_single"];
Blockly.JavaScript["math_trig"] = Blockly.JavaScript["math_single"];
Blockly.JavaScript["math_on_list"] = function(block) {
    var func = block.getFieldValue("OP");
    var list, code;
    switch (func) {
        case "SUM":
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_MEMBER) || "[]";
            code = list + ".reduce(function(x, y) {return x + y;})";
            break;
        case "MIN":
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_COMMA) || "[]";
            code = "Math.min.apply(null, " + list + ")";
            break;
        case "MAX":
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_COMMA) ||
                "[]";
            code = "Math.max.apply(null, " + list + ")";
            break;
        case "AVERAGE":
            var functionName = Blockly.JavaScript.provideFunction_("mathMean", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  return myList.reduce(function(x, y) {return x + y;}) / " + "myList.length;", "}"]);
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_NONE) || "[]";
            code = functionName + "(" + list + ")";
            break;
        case "MEDIAN":
            var functionName = Blockly.JavaScript.provideFunction_("mathMedian", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +
                "(myList) {", "  var localList = myList.filter(function (x) " + "{return typeof x == 'number';});", "  if (!localList.length) return null;", "  localList.sort(function(a, b) {return b - a;});", "  if (localList.length % 2 == 0) {", "    return (localList[localList.length / 2 - 1] + " + "localList[localList.length / 2]) / 2;", "  } else {", "    return localList[(localList.length - 1) / 2];", "  }", "}"
            ]);
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_NONE) || "[]";
            code = functionName + "(" +
                list + ")";
            break;
        case "MODE":
            var functionName = Blockly.JavaScript.provideFunction_("mathModes", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(values) {", "  var modes = [];", "  var counts = [];", "  var maxCount = 0;", "  for (var i = 0; i < values.length; i++) {", "    var value = values[i];", "    var found = false;", "    var thisCount;", "    for (var j = 0; j < counts.length; j++) {", "      if (counts[j][0] === value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;",
                "      }", "    }", "    if (!found) {", "      counts.push([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (var j = 0; j < counts.length; j++) {", "    if (counts[j][1] == maxCount) {", "        modes.push(counts[j][0]);", "    }", "  }", "  return modes;", "}"
            ]);
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_NONE) || "[]";
            code = functionName + "(" + list + ")";
            break;
        case "STD_DEV":
            var functionName = Blockly.JavaScript.provideFunction_("mathStandardDeviation",
                ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(numbers) {", "  var n = numbers.length;", "  if (!n) return null;", "  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;", "  var variance = 0;", "  for (var j = 0; j < n; j++) {", "    variance += Math.pow(numbers[j] - mean, 2);", "  }", "  variance = variance / n;", "  return Math.sqrt(variance);", "}"]);
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_NONE) || "[]";
            code = functionName + "(" + list + ")";
            break;
        case "RANDOM":
            var functionName =
                Blockly.JavaScript.provideFunction_("mathRandomList", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(list) {", "  var x = Math.floor(Math.random() * list.length);", "  return list[x];", "}"]);
            list = Blockly.JavaScript.valueToCode(block, "LIST", Blockly.JavaScript.ORDER_NONE) || "[]";
            code = functionName + "(" + list + ")";
            break;
        default:
            throw Error("Unknown operator: " + func);
    }
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["math_modulo"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "DIVIDEND", Blockly.JavaScript.ORDER_MODULUS) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "DIVISOR", Blockly.JavaScript.ORDER_MODULUS) || "0";
    var code = argument0 + " % " + argument1;
    return [code, Blockly.JavaScript.ORDER_MODULUS]
};
Blockly.JavaScript["math_constrain"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_COMMA) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "LOW", Blockly.JavaScript.ORDER_COMMA) || "0";
    var argument2 = Blockly.JavaScript.valueToCode(block, "HIGH", Blockly.JavaScript.ORDER_COMMA) || "Infinity";
    var code = "Math.min(Math.max(" + argument0 + ", " + argument1 + "), " + argument2 + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["math_random_int"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "FROM", Blockly.JavaScript.ORDER_COMMA) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "TO", Blockly.JavaScript.ORDER_COMMA) || "0";
    var functionName = Blockly.JavaScript.provideFunction_("mathRandomInt", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(a, b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    var c = a;", "    a = b;", "    b = c;", "  }", "  return Math.floor(Math.random() * (b - a + 1) + a);",
        "}"
    ]);
    var code = functionName + "(" + argument0 + ", " + argument1 + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["math_random_float"] = function(block) {
    return ["Math.random()", Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["math_atan2"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "X", Blockly.JavaScript.ORDER_COMMA) || "0";
    var argument1 = Blockly.JavaScript.valueToCode(block, "Y", Blockly.JavaScript.ORDER_COMMA) || "0";
    return ["Math.atan2(" + argument1 + ", " + argument0 + ") / Math.PI * 180", Blockly.JavaScript.ORDER_DIVISION]
};
goog.provide("Blockly.JavaScript.procedures");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["procedures_defreturn"] = function(block) {
    var funcName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var branch = Blockly.JavaScript.statementToCode(block, "STACK");
    if (Blockly.JavaScript.STATEMENT_PREFIX) {
        var id = block.id.replace(/\$/g, "$$$$");
        branch = Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, "'" + id + "'"), Blockly.JavaScript.INDENT) + branch
    }
    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,
        "'" + block.id + "'") + branch;
    var returnValue = Blockly.JavaScript.valueToCode(block, "RETURN", Blockly.JavaScript.ORDER_NONE) || "";
    if (returnValue) returnValue = Blockly.JavaScript.INDENT + "return " + returnValue + ";\n";
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.JavaScript.variableDB_.getName(block.arguments_[i], Blockly.Variables.NAME_TYPE);
    var code = "function " + funcName + "(" + args.join(", ") + ") {\n" + branch + returnValue + "}";
    code = Blockly.JavaScript.scrub_(block, code);
    Blockly.JavaScript.definitions_["%" +
        funcName] = code;
    return null
};
Blockly.JavaScript["procedures_defnoreturn"] = Blockly.JavaScript["procedures_defreturn"];
Blockly.JavaScript["procedures_callreturn"] = function(block) {
    var funcName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.JavaScript.valueToCode(block, "ARG" + i, Blockly.JavaScript.ORDER_COMMA) || "null";
    var code = funcName + "(" + args.join(", ") + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["procedures_callnoreturn"] = function(block) {
    var funcName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    var args = [];
    for (var i = 0; i < block.arguments_.length; i++) args[i] = Blockly.JavaScript.valueToCode(block, "ARG" + i, Blockly.JavaScript.ORDER_COMMA) || "null";
    var code = funcName + "(" + args.join(", ") + ");\n";
    return code
};
Blockly.JavaScript["procedures_ifreturn"] = function(block) {
    var condition = Blockly.JavaScript.valueToCode(block, "CONDITION", Blockly.JavaScript.ORDER_NONE) || "false";
    var code = "if (" + condition + ") {\n";
    if (block.hasReturnValue_) {
        var value = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_NONE) || "null";
        code += Blockly.JavaScript.INDENT + "return " + value + ";\n"
    } else code += Blockly.JavaScript.INDENT + "return;\n";
    code += "}\n";
    return code
};
goog.provide("Blockly.JavaScript.texts");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["text"] = function(block) {
    var code = Blockly.JavaScript.quote_(block.getFieldValue("TEXT"));
    return [code, Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript.text.forceString_ = function(value) {
    if (Blockly.JavaScript.text.forceString_.strRegExp.test(value)) return value;
    return "String(" + value + ")"
};
Blockly.JavaScript.text.forceString_.strRegExp = /^\s*'([^']|\\')*'\s*$/;
Blockly.JavaScript["text_join"] = function(block) {
    switch (block.itemCount_) {
        case 0:
            return ["''", Blockly.JavaScript.ORDER_ATOMIC];
        case 1:
            var element = Blockly.JavaScript.valueToCode(block, "ADD0", Blockly.JavaScript.ORDER_NONE) || "''";
            var code = Blockly.JavaScript.text.forceString_(element);
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        case 2:
            var element0 = Blockly.JavaScript.valueToCode(block, "ADD0", Blockly.JavaScript.ORDER_NONE) || "''";
            var element1 = Blockly.JavaScript.valueToCode(block, "ADD1", Blockly.JavaScript.ORDER_NONE) ||
                "''";
            var code = Blockly.JavaScript.text.forceString_(element0) + " + " + Blockly.JavaScript.text.forceString_(element1);
            return [code, Blockly.JavaScript.ORDER_ADDITION];
        default:
            var elements = new Array(block.itemCount_);
            for (var i = 0; i < block.itemCount_; i++) elements[i] = Blockly.JavaScript.valueToCode(block, "ADD" + i, Blockly.JavaScript.ORDER_COMMA) || "''";
            var code = "[" + elements.join(",") + "].join('')";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
    }
};
Blockly.JavaScript["text_append"] = function(block) {
    var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    var value = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_NONE) || "''";
    return varName + " += " + Blockly.JavaScript.text.forceString_(value) + ";\n"
};
Blockly.JavaScript["text_length"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_FUNCTION_CALL) || "''";
    return [text + ".length", Blockly.JavaScript.ORDER_MEMBER]
};
Blockly.JavaScript["text_isEmpty"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_MEMBER) || "''";
    return ["!" + text + ".length", Blockly.JavaScript.ORDER_LOGICAL_NOT]
};
Blockly.JavaScript["text_indexOf"] = function(block) {
    var operator = block.getFieldValue("END") == "FIRST" ? "indexOf" : "lastIndexOf";
    var substring = Blockly.JavaScript.valueToCode(block, "FIND", Blockly.JavaScript.ORDER_NONE) || "''";
    var text = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_MEMBER) || "''";
    var code = text + "." + operator + "(" + substring + ")";
    if (block.workspace.options.oneBasedIndex) return [code + " + 1", Blockly.JavaScript.ORDER_ADDITION];
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["text_charAt"] = function(block) {
    var where = block.getFieldValue("WHERE") || "FROM_START";
    var textOrder = where == "RANDOM" ? Blockly.JavaScript.ORDER_NONE : Blockly.JavaScript.ORDER_MEMBER;
    var text = Blockly.JavaScript.valueToCode(block, "VALUE", textOrder) || "''";
    switch (where) {
        case "FIRST":
            var code = text + ".charAt(0)";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        case "LAST":
            var code = text + ".slice(-1)";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        case "FROM_START":
            var at = Blockly.JavaScript.getAdjusted(block,
                "AT");
            var code = text + ".charAt(" + at + ")";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        case "FROM_END":
            var at = Blockly.JavaScript.getAdjusted(block, "AT", 1, true);
            var code = text + ".slice(" + at + ").charAt(0)";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        case "RANDOM":
            var functionName = Blockly.JavaScript.provideFunction_("textRandomLetter", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(text) {", "  var x = Math.floor(Math.random() * text.length);", "  return text[x];", "}"]);
            var code = functionName +
                "(" + text + ")";
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
    }
    throw Error("Unhandled option (text_charAt).");
};
Blockly.JavaScript.text.getIndex_ = function(stringName, where, opt_at) {
    if (where == "FIRST") return "0";
    else if (where == "FROM_END") return stringName + ".length - 1 - " + opt_at;
    else if (where == "LAST") return stringName + ".length - 1";
    else return opt_at
};
Blockly.JavaScript["text_getSubstring"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "STRING", Blockly.JavaScript.ORDER_FUNCTION_CALL) || "''";
    var where1 = block.getFieldValue("WHERE1");
    var where2 = block.getFieldValue("WHERE2");
    if (where1 == "FIRST" && where2 == "LAST") var code = text;
    else if (text.match(/^'?\w+'?$/) || where1 != "FROM_END" && where1 != "LAST" && where2 != "FROM_END" && where2 != "LAST") {
        switch (where1) {
            case "FROM_START":
                var at1 = Blockly.JavaScript.getAdjusted(block, "AT1");
                break;
            case "FROM_END":
                var at1 =
                    Blockly.JavaScript.getAdjusted(block, "AT1", 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);
                at1 = text + ".length - " + at1;
                break;
            case "FIRST":
                var at1 = "0";
                break;
            default:
                throw Error("Unhandled option (text_getSubstring).");
        }
        switch (where2) {
            case "FROM_START":
                var at2 = Blockly.JavaScript.getAdjusted(block, "AT2", 1);
                break;
            case "FROM_END":
                var at2 = Blockly.JavaScript.getAdjusted(block, "AT2", 0, false, Blockly.JavaScript.ORDER_SUBTRACTION);
                at2 = text + ".length - " + at2;
                break;
            case "LAST":
                var at2 = text + ".length";
                break;
            default:
                throw Error("Unhandled option (text_getSubstring).");
        }
        code = text + ".slice(" + at1 + ", " + at2 + ")"
    } else {
        var at1 = Blockly.JavaScript.getAdjusted(block, "AT1");
        var at2 = Blockly.JavaScript.getAdjusted(block, "AT2");
        var getIndex_ = Blockly.JavaScript.text.getIndex_;
        var wherePascalCase = {
            "FIRST": "First",
            "LAST": "Last",
            "FROM_START": "FromStart",
            "FROM_END": "FromEnd"
        };
        var functionName = Blockly.JavaScript.provideFunction_("subsequence" + wherePascalCase[where1] + wherePascalCase[where2], ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + (where1 == "FROM_END" || where1 ==
            "FROM_START" ? ", at1" : "") + (where2 == "FROM_END" || where2 == "FROM_START" ? ", at2" : "") + ") {", "  var start = " + getIndex_("sequence", where1, "at1") + ";", "  var end = " + getIndex_("sequence", where2, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]);
        var code = functionName + "(" + text + (where1 == "FROM_END" || where1 == "FROM_START" ? ", " + at1 : "") + (where2 == "FROM_END" || where2 == "FROM_START" ? ", " + at2 : "") + ")"
    }
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["text_changeCase"] = function(block) {
    var OPERATORS = {
        "UPPERCASE": ".toUpperCase()",
        "LOWERCASE": ".toLowerCase()",
        "TITLECASE": null
    };
    var operator = OPERATORS[block.getFieldValue("CASE")];
    var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER : Blockly.JavaScript.ORDER_NONE;
    var text = Blockly.JavaScript.valueToCode(block, "TEXT", textOrder) || "''";
    if (operator) var code = text + operator;
    else {
        var functionName = Blockly.JavaScript.provideFunction_("textToTitleCase", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +
            "(str) {", "  return str.replace(/\\S+/g,", "      function(txt) {return txt[0].toUpperCase() + " + "txt.substring(1).toLowerCase();});", "}"
        ]);
        var code = functionName + "(" + text + ")"
    }
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["text_trim"] = function(block) {
    var OPERATORS = {
        "LEFT": ".replace(/^[\\s\\xa0]+/, '')",
        "RIGHT": ".replace(/[\\s\\xa0]+$/, '')",
        "BOTH": ".trim()"
    };
    var operator = OPERATORS[block.getFieldValue("MODE")];
    var text = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_MEMBER) || "''";
    return [text + operator, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["text_print"] = function(block) {
    var msg = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_NONE) || "''";
    return "window.alert(" + msg + ");\n"
};
Blockly.JavaScript["text_prompt_ext"] = function(block) {
    if (block.getField("TEXT")) var msg = Blockly.JavaScript.quote_(block.getFieldValue("TEXT"));
    else var msg = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_NONE) || "''";
    var code = "window.prompt(" + msg + ")";
    var toNumber = block.getFieldValue("TYPE") == "NUMBER";
    if (toNumber) code = "parseFloat(" + code + ")";
    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL]
};
Blockly.JavaScript["text_prompt"] = Blockly.JavaScript["text_prompt_ext"];
Blockly.JavaScript["text_count"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_MEMBER) || "''";
    var sub = Blockly.JavaScript.valueToCode(block, "SUB", Blockly.JavaScript.ORDER_NONE) || "''";
    var functionName = Blockly.JavaScript.provideFunction_("textCount", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle) {", "  if (needle.length === 0) {", "    return haystack.length + 1;", "  } else {", "    return haystack.split(needle).length - 1;",
        "  }", "}"
    ]);
    var code = functionName + "(" + text + ", " + sub + ")";
    return [code, Blockly.JavaScript.ORDER_SUBTRACTION]
};
Blockly.JavaScript["text_replace"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_MEMBER) || "''";
    var from = Blockly.JavaScript.valueToCode(block, "FROM", Blockly.JavaScript.ORDER_NONE) || "''";
    var to = Blockly.JavaScript.valueToCode(block, "TO", Blockly.JavaScript.ORDER_NONE) || "''";
    var functionName = Blockly.JavaScript.provideFunction_("textReplace", ["function " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle, replacement) {", "  needle = " + 'needle.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,"\\\\$1")',
        '                 .replace(/\\x08/g,"\\\\x08");', "  return haystack.replace(new RegExp(needle, 'g'), replacement);", "}"
    ]);
    var code = functionName + "(" + text + ", " + from + ", " + to + ")";
    return [code, Blockly.JavaScript.ORDER_MEMBER]
};
Blockly.JavaScript["text_reverse"] = function(block) {
    var text = Blockly.JavaScript.valueToCode(block, "TEXT", Blockly.JavaScript.ORDER_MEMBER) || "''";
    var code = text + ".split('').reverse().join('')";
    return [code, Blockly.JavaScript.ORDER_MEMBER]
};
goog.provide("Blockly.JavaScript.variables");
goog.require("Blockly.JavaScript");
Blockly.JavaScript["variables_get"] = function(block) {
    var code = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return [code, Blockly.JavaScript.ORDER_ATOMIC]
};
Blockly.JavaScript["variables_set"] = function(block) {
    var argument0 = Blockly.JavaScript.valueToCode(block, "VALUE", Blockly.JavaScript.ORDER_ASSIGNMENT) || "0";
    var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return varName + " = " + argument0 + ";\n"
};
goog.provide("Blockly.JavaScript.variablesDynamic");
goog.require("Blockly.JavaScript");
goog.require("Blockly.JavaScript.variables");
Blockly.JavaScript["variables_get_dynamic"] = Blockly.JavaScript["variables_get"];
Blockly.JavaScript["variables_set_dynamic"] = Blockly.JavaScript["variables_set"];